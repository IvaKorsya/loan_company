from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove
from services.phone_validation import validate_phone_number
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.exc import IntegrityError
from datetime import datetime
import logging

from utils.database import async_session
from models.user import Client
from config import Config
from states import FormStates

router = Router(name="client_handlers")

class ClientRegistrationForm:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    def __init__(self):
        self.fullName = None
        self.passport = None
        self.phone = None
        self.email = None

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ—Ä–º (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis)
temp_storage = {}



@router.message(Command("register"))
async def start_registration(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    form = ClientRegistrationForm()
    temp_storage[message.from_user.id] = form

    await message.answer(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –§–ò–û</b>:",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("me"))
async def view_personal_info(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    async with async_session() as session:
        result = await session.execute(
            select(Client)
            .where(Client.telegram_id == message.from_user.id)
        )
        client = result.scalar()

        if not client:
            return await message.answer("‚Ñπ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = client.registration_date.strftime("%d.%m.%Y")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
        masked_phone = client.phone_numbers[0][:-4] + "****" if client.phone_numbers else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º email (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å)
        email_parts = client.email.split("@") if client.email else []
        masked_email = f"{email_parts[0][:2]}****@{email_parts[1]}" if len(email_parts) == 2 else "–ù–µ —É–∫–∞–∑–∞–Ω"

        response = (
            "üë§ <b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"<b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {client.clientID}\n"
            f"<b>–§–ò–û:</b> {client.fullName}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {masked_phone}\n"
            f"<b>Email:</b> {masked_email}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}\n"
            f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}/1000\n\n"
            "üîí <i>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</i>"
        )

        await message.answer(response, parse_mode=ParseMode.HTML)

@router.message(Command("credit_info"))
async def view_credit_info(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    """
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = await session.execute(
                select(Client)
                .where(Client.telegram_id == message.from_user.id)
            )
            client = client.scalar()

            if not client:
                return await message.answer(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            rating_emoji = "‚≠êÔ∏è" * (client.creditScore // 200)
            reg_date = client.registration_date.strftime("%d.%m.%Y")

            msg = [
                f"<b>üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}/1000 {rating_emoji}",
                f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}",
                "",
                "<b>üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:</b>",
                get_credit_status(client.creditScore),
                "",
                "<b>üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>",
                get_credit_advice(client.creditScore)
            ]

            await message.answer(
                "\n".join(msg),
                parse_mode=ParseMode.HTML
            )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

def get_credit_status(score: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if score >= 800:
        return "–û—Ç–ª–∏—á–Ω—ã–π - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"
    elif score >= 600:
        return "–•–æ—Ä–æ—à–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
    elif score >= 400:
        return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏"
    else:
        return "–ù–∏–∑–∫–∏–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"

def get_credit_advice(score: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    advice = []
    if score < 700:
        advice.append("- –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–≥–∞—à–∞–π—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã")
    if score < 500:
        advice.append("- –£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
    if score < 300:
        advice.append("- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")

    return "\n".join(advice) if advice else "–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π!"

@router.message(Command("update_contact"))
async def start_contact_update(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    buttons = [
        [types.KeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", )],
        [types.KeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email")],
        [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?",
        reply_markup=keyboard
    )

@router.message(F.text == "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def start_phone_update(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXYYYYYYY:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FormStates.waiting_for_phone)

@router.message(FormStates.waiting_for_phone)
async def process_new_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
        phone = validate_phone_number(message.text)

        async with async_session() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –ë–î
            client = await session.execute(
                select(Client)
                .where(Client.telegram_id == message.from_user.id)
            )
            client = client.scalar()

            if not client:
                await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            client.phone_numbers = [phone]
            await session.commit()

        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await state.clear()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logging.error(f"Phone update error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].fullName)
async def process_full_name(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    form = temp_storage[message.from_user.id]
    form.fullName = message.text

    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ <b>—Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞</b> (10 —Ü–∏—Ñ—Ä):\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 4510123456</i>",
        parse_mode=ParseMode.HTML
    )

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].passport)
async def process_passport(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not message.text.isdigit() or len(message.text) != 10:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä.")

    form = temp_storage[message.from_user.id]
    form.passport = message.text

    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã):\n"
        "<i>–ü—Ä–∏–º–µ—Ä: +79161234567</i>",
        parse_mode=ParseMode.HTML
    )

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].phone)
async def process_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        form = temp_storage[message.from_user.id]
        form.phone = Client.validate_phone(message.text)

        await message.answer(
            "üìß –í–≤–µ–¥–∏—Ç–µ <b>email</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
            "<i>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å</i>",
            parse_mode=ParseMode.HTML
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].email)
async def process_email(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    form = temp_storage.pop(message.from_user.id)
    email = message.text if "@" in message.text else None

    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await session.execute(
                select(Client).where(
                    (Client.telegram_id == message.from_user.id) |
                    (Client.passport == form.passport)
                )
            )

            if existing.scalar():
                return await message.answer("‚ö† –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            client = Client(
                fullName=form.fullName,
                passport=form.passport,
                telegram_id=message.from_user.id,
                phone_numbers=[form.phone],
                email=email,
                creditScore=300  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            )

            session.add(client)
            await session.commit()

            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"<b>–í–∞—à ID:</b> {client.clientID}\n"
                f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}",
                parse_mode=ParseMode.HTML
            )

        except IntegrityError:
            await session.rollback()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(Command("my_profile"))
async def show_profile(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞"""
    async with async_session() as session:
        client = await session.execute(
            select(Client)
            .where(Client.telegram_id == message.from_user.id)
        )
        client = client.scalar()

        if not client:
            return await message.answer("‚Ñπ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

        safe_data = client.to_safe_schema()

        await message.answer(
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>ID:</b> {safe_data.clientID}\n"
            f"<b>–§–ò–û:</b> {safe_data.fullName}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {safe_data.registration_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {safe_data.creditScore}",
            parse_mode=ParseMode.HTML
        )