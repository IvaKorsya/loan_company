from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from decimal import Decimal
from services.phone_validation import validate_phone_number
from sqlalchemy import select, func, and_
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import joinedload
import logging

from utils.database import async_session
from models.user import Client, Loan, Payment, CreditHistory
from models.base import LoanType, LoanStatus
from config import Config
from states import FormStates, LoanStates
from utils.calculations import *
from utils.auxiliary_funcs import *
from utils.generate_files import *

router = Router(name="client_handlers")

class ClientRegistrationForm:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    def __init__(self):
        self.fullName = None
        self.passport = None
        self.phone = None
        self.email = None

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ—Ä–º (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis)
temp_storage = {}



@router.message(Command("register"))
async def start_registration(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    form = ClientRegistrationForm()
    temp_storage[message.from_user.id] = form

    await message.answer(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –§–ò–û</b>:",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("me"))
async def view_personal_info(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    async with async_session() as session:
        result = await session.execute(
            select(Client)
            .where(Client.telegram_id == message.from_user.id)
        )
        client = result.scalar()

        if not client:
            return await message.answer("‚Ñπ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = client.registration_date.strftime("%d.%m.%Y")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
        masked_phone = client.phone_numbers[0][:-4] + "****" if client.phone_numbers else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º email (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å)
        email_parts = client.email.split("@") if client.email else []
        masked_email = f"{email_parts[0][:2]}****@{email_parts[1]}" if len(email_parts) == 2 else "–ù–µ —É–∫–∞–∑–∞–Ω"

        response = (
            "üë§ <b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"<b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {client.clientID}\n"
            f"<b>–§–ò–û:</b> {client.fullName}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {masked_phone}\n"
            f"<b>Email:</b> {masked_email}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}\n"
            f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}/1000\n\n"
            "üîí <i>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</i>"
        )

        await message.answer(response, parse_mode=ParseMode.HTML)

@router.message(Command("credit_info"))
async def view_credit_info(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    """
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = await session.execute(
                select(Client)
                .where(Client.telegram_id == message.from_user.id)
            )
            client = client.scalar()

            if not client:
                return await message.answer(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            rating_emoji = "‚≠êÔ∏è" * (client.creditScore // 200)
            reg_date = client.registration_date.strftime("%d.%m.%Y")

            msg = [
                f"<b>üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}/1000 {rating_emoji}",
                f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}",
                "",
                "<b>üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:</b>",
                get_credit_status(client.creditScore),
                "",
                "<b>üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>",
                get_credit_advice(client.creditScore)
            ]

            await message.answer(
                "\n".join(msg),
                parse_mode=ParseMode.HTML
            )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

@router.message(Command("update_contact"))
async def start_contact_update(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    buttons = [
        [types.KeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", )],
        [types.KeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email")],
        [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?",
        reply_markup=keyboard
    )

@router.message(F.text == "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def start_phone_update(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXYYYYYYY:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FormStates.waiting_for_phone)

@router.message(FormStates.waiting_for_phone)
async def process_new_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
        phone = validate_phone_number(message.text)

        async with async_session() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –ë–î
            client = await session.execute(
                select(Client)
                .where(Client.telegram_id == message.from_user.id)
            )
            client = client.scalar()

            if not client:
                await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            client.phone_numbers = [phone]
            await session.commit()

        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await state.clear()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logging.error(f"Phone update error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].fullName)
async def process_full_name(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    form = temp_storage[message.from_user.id]
    form.fullName = message.text

    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ <b>—Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞</b> (10 —Ü–∏—Ñ—Ä):\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 4510123456</i>",
        parse_mode=ParseMode.HTML
    )

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].passport)
async def process_passport(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not message.text.isdigit() or len(message.text) != 10:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä.")

    form = temp_storage[message.from_user.id]
    form.passport = message.text

    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã):\n"
        "<i>–ü—Ä–∏–º–µ—Ä: +79161234567</i>",
        parse_mode=ParseMode.HTML
    )

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].phone)
async def process_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        form = temp_storage[message.from_user.id]
        form.phone = Client.validate_phone(message.text)

        await message.answer(
            "üìß –í–≤–µ–¥–∏—Ç–µ <b>email</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
            "<i>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å</i>",
            parse_mode=ParseMode.HTML
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].email)
async def process_email(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    form = temp_storage.pop(message.from_user.id)
    email = message.text if "@" in message.text else None

    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await session.execute(
                select(Client).where(
                    (Client.telegram_id == message.from_user.id) |
                    (Client.passport == form.passport)
                )
            )

            if existing.scalar():
                return await message.answer("‚ö† –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            client = Client(
                fullName=form.fullName,
                passport=form.passport,
                telegram_id=message.from_user.id,
                phone_numbers=[form.phone],
                email=email,
                creditScore=300  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            )

            session.add(client)
            await session.commit()

            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"<b>–í–∞—à ID:</b> {client.clientID}\n"
                f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}",
                parse_mode=ParseMode.HTML
            )

        except IntegrityError:
            await session.rollback()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(Command("my_profile"))
async def show_profile(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞"""
    async with async_session() as session:
        client = await session.execute(
            select(Client)
            .where(Client.telegram_id == message.from_user.id)
        )
        client = client.scalar()

        if not client:
            return await message.answer("‚Ñπ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

        safe_data = client.to_safe_schema()

        await message.answer(
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>ID:</b> {safe_data.clientID}\n"
            f"<b>–§–ò–û:</b> {safe_data.fullName}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {safe_data.registration_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {safe_data.creditScore}",
            parse_mode=ParseMode.HTML
        )

#–î–∞–ª–µ–µ –∫—Ä–µ–¥–∏—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏

@router.message(Command("my_loans"))
async def show_client_loans(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫—Ä–µ–¥–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    async with async_session() as session:
        client = await session.execute(
            select(Client)
            .where(Client.telegram_id == message.from_user.id)
        )
        client = client.scalar()

        if not client:
            return await message.answer("‚Ñπ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

        loans = await session.execute(
            select(Loan)
            .where(Loan.client_id == client.clientID)
            .order_by(Loan.issue_date.desc())
        )
        loans = loans.scalars().all()

        if not loans:
            return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤")
            
        response = ["üìã <b>–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:</b>"]
        
        for loan in loans:
            status_emoji = "üü¢" if loan.status == LoanStatus.ACTIVE else "üî¥"
            response.append(
                f"{status_emoji} <b>–ö—Ä–µ–¥–∏—Ç #{loan.loan_id}</b>\n"
                f"–°—É–º–º–∞: {loan.amount} —Ä—É–±.\n"
                f"–°—Ç–∞—Ç—É—Å: {loan.status.value}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {loan.remaining_amount} —Ä—É–±."
            )

        await message.answer(
            "\n\n".join(response),
            parse_mode=ParseMode.HTML
        )

@router.message(Command("take_loan"))
async def start_loan_process(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        client = await session.execute(
            select(Client)
            .where(Client.telegram_id == message.from_user.id)
        )
        client = client.scalar()

        if not client:
            return await message.answer("‚Ñπ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        active_loans = await session.execute(
            select(func.count(Loan.loan_id))
            .where(
                and_(
                    Loan.client_id == client.clientID,
                    Loan.status == LoanStatus.ACTIVE
                )
            )
        )
        
        if active_loans.scalar() > 0:
            return await message.answer(
                "‚ùå –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã. "
                "–ù–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω."
            )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
        loan_types = await session.execute(select(LoanType))
        loan_types = loan_types.scalars().all()

        if not loan_types:
            return await message.answer("‚ö† –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=f"{lt.name} ({lt.interest_rate}%)")] 
                for lt in loan_types
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞:</b>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await state.set_state(LoanStates.choose_loan_type)

@router.message(LoanStates.choose_loan_type)
async def process_loan_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞
            loan_type_name = message.text.split('(')[0].strip()
            loan_type = await session.execute(
                select(LoanType)
                .where(LoanType.name == loan_type_name)
            )
            loan_type = loan_type.scalar()

            if not loan_type:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data({
                'loan_type_id': loan_type.type_id,
                'min_amount': loan_type.min_amount,
                'max_amount': loan_type.max_amount,
                'min_term': loan_type.min_term,
                'max_term': loan_type.max_term,
                'interest_rate': loan_type.interest_rate
            })
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞
            await message.answer(
                f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–æ—Ç {loan_type.min_amount} –¥–æ {loan_type.max_amount} —Ä—É–±.):",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(LoanStates.enter_amount)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞: {e}")
            await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()

@router.message(LoanStates.enter_amount)
async def process_loan_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞"""
    try:
        data = await state.get_data()
        amount = Decimal(message.text.replace(',', '.'))
        
        if amount < data['min_amount'] or amount > data['max_amount']:
            raise ValueError(
                f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {data['min_amount']} –¥–æ {data['max_amount']} —Ä—É–±."
            )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É
        async with async_session() as session:
            client = await session.execute(
                select(Client)
                .where(Client.telegram_id == message.from_user.id)
            )
            client = client.scalar()

            max_allowed = await calculate_max_loan_amount(client.clientID, session)
            if amount > max_allowed:
                raise ValueError(
                    f"–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑—è—Ç—å –º–∞–∫—Å–∏–º—É–º {max_allowed} —Ä—É–±."
                )

        await state.update_data({'amount': amount})
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞
        await message.answer(
            f"‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö (–æ—Ç {int(data['min_term'])} –¥–æ {int(data['max_term'])}):"
        )
        await state.set_state(LoanStates.enter_term)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(LoanStates.enter_term)
async def process_loan_term(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
    try:
        term = int(message.text)
        data = await state.get_data()
        
        if term < data['min_term'] or term > data['max_term']:
            raise ValueError(
                f"–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {data['min_term']} –¥–æ {data['max_term']} –º–µ—Å—è—Ü–µ–≤"
            )

        await state.update_data({'term': term})
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        monthly_payment = calculate_monthly_payment(
            data['amount'],
            term,
            data['interest_rate']
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç–∞:</b>\n\n"
            f"–¢–∏–ø: {message.text.split('(')[0].strip()}\n"
            f"–°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
            f"–°—Ä–æ–∫: {term} –º–µ—Å.\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {data['interest_rate']}%\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: ~{monthly_payment:.2f} —Ä—É–±.\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞?",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await state.set_state(LoanStates.confirm_loan)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(LoanStates.confirm_loan, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_loan(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞"""
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = await session.execute(
                select(Client)
                .where(Client.telegram_id == message.from_user.id)
            )
            client = client.scalar()

            if not client:
                await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç
            new_loan = Loan(
                client_id=client.clientID,
                loan_type_id=data['loan_type_id'],
                issue_date=datetime.utcnow(),
                amount=Decimal(data['amount']),
                term=data['term'],
                status=LoanStatus.ACTIVE,
                total_paid=Decimal('0.00'),
                remaining_amount=Decimal(data['amount'])
            )
            
            session.add(new_loan)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º loan_id
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
            
            payments = await generate_payment_schedule(
                loan_id=new_loan.loan_id,
                amount=Decimal(data['amount']),
                term=data['term'],
                interest_rate=data['interest_rate'],
                start_date=datetime.utcnow().date(),
                session=session
            )   
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å–µ—Å—Å–∏—é
            if payments:
                for payment in payments:
                    session.add(payment)
            else:
                logging.error("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞
            client.creditScore = min(1000, client.creditScore + 10)  # –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –≤–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
            
            await session.commit()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            monthly_payment = calculate_monthly_payment(
                Decimal(data['amount']),
                data['term'],
                data['interest_rate']
            )
            
            # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø–ª–∞—Ç–µ–∂–µ–π
            csv_file = generate_payments_csv(payments, new_loan.loan_id)

            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫—Ä–µ–¥–∏—Ç–∞
            await message.answer(
                "‚úÖ <b>–ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                f"üîπ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{new_loan.loan_id}\n"
                f"üîπ –°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
                f"üîπ –°—Ä–æ–∫: {data['term']} –º–µ—Å.\n"
                f"üîπ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {data['interest_rate']}%\n"
                f"üîπ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:.2f} —Ä—É–±.\n\n"
                "–í –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π:",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_document(csv_file)
            
        except Exception as e:
            await session.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞: {e}", exc_info=True)
            await message.answer(
                "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        finally:
            await state.clear()

@router.message(LoanStates.confirm_loan, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_loan(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    await message.answer(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

        