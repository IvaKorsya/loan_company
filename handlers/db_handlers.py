from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN
from sqlalchemy import select, func, and_, delete
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import joinedload
import logging
import math

from utils.database import async_session
from models import LoanType, Client, Loan, Payment
from config import Config
from states import *
from utils.calculations import *
from utils.auxiliary_funcs import *
from utils.generate_files import *

router = Router(name="client_handlers")

class ClientRegistrationForm:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    def __init__(self):
        self.fullName = None
        self.passport = None
        self.phone = None
        self.email = None

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ—Ä–º (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis)
temp_storage = {}

@router.message(Command("register"))
async def start_registration(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    form = ClientRegistrationForm()
    temp_storage[message.from_user.id] = form

    await message.answer(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –§–ò–û</b>:",
        parse_mode=ParseMode.HTML
    )

@router.message(Command("me"))
async def view_personal_info(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    async with async_session() as session:
        client = await check_client_registered(message, session)
        if not client:
            return
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = client.registration_date.strftime("%d.%m.%Y")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
        masked_phone = client.phone_numbers[0][:-4] + "****" if client.phone_numbers else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º email (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å)
        email_parts = client.email.split("@") if client.email else []
        masked_email = f"{email_parts[0][:2]}****@{email_parts[1]}" if len(email_parts) == 2 else "–ù–µ —É–∫–∞–∑–∞–Ω"

        response = (
            "üë§ <b>–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"<b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {client.clientID}\n"
            f"<b>–§–ò–û:</b> {client.fullName}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {masked_phone}\n"
            f"<b>Email:</b> {masked_email}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}\n"
            f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}/1000\n\n"
            "üîí <i>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</i>"
        )

        await message.answer(response, parse_mode=ParseMode.HTML)

@router.message(Command("credit_info"))
async def view_credit_info(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
    """
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = await check_client_registered(message, session)
            if not client:
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            rating_emoji = "‚≠êÔ∏è" * (client.creditScore // 200)
            reg_date = client.registration_date.strftime("%d.%m.%Y")

            msg = [
                f"<b>üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}/1000 {rating_emoji}",
                f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}",
                "",
                "<b>üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:</b>",
                get_credit_status(client.creditScore),
                "",
                "<b>üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>",
                get_credit_advice(client.creditScore)
            ]

            await message.answer(
                "\n".join(msg),
                parse_mode=ParseMode.HTML
            )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

@router.message(Command("update_contact"))
async def start_contact_update(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    buttons = [
        [types.KeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", )],
        [types.KeyboardButton(text="üìß –ò–∑–º–µ–Ω–∏—Ç—å email")],
        [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?",
        reply_markup=keyboard
    )

@router.message(F.text == "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def start_phone_update(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXYYYYYYY:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FormStates.waiting_for_phone)

@router.message(FormStates.waiting_for_phone)
async def process_new_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
        phone = Client.validate_phone(message.text)

        async with async_session() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –ë–î
            client = await check_client_registered(message, session)
            if not client:
                return

            client.phone_numbers = [phone]
            await session.commit()

        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await state.clear()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logging.error(f"Phone update error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].fullName)
async def process_full_name(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    form = temp_storage[message.from_user.id]
    form.fullName = message.text

    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ <b>—Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞</b> (10 —Ü–∏—Ñ—Ä):\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 4510123456</i>",
        parse_mode=ParseMode.HTML
    )

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].passport)
async def process_passport(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not message.text.isdigit() or len(message.text) != 10:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä.")

    form = temp_storage[message.from_user.id]
    form.passport = message.text

    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã):\n"
        "<i>–ü—Ä–∏–º–µ—Ä: +79161234567</i>",
        parse_mode=ParseMode.HTML
    )

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].phone)
async def process_phone(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        form = temp_storage[message.from_user.id]
        form.phone = Client.validate_phone(message.text)

        await message.answer(
            "üìß –í–≤–µ–¥–∏—Ç–µ <b>email</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
            "<i>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å</i>",
            parse_mode=ParseMode.HTML
        )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(F.text, lambda msg: msg.from_user.id in temp_storage and not temp_storage[msg.from_user.id].email)
async def process_email(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    form = temp_storage.pop(message.from_user.id)
    email = message.text if "@" in message.text else None

    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing = await session.execute(
                select(Client).where(
                    (Client.telegram_id == message.from_user.id) |
                    (Client.passport == form.passport)
                )
            )

            if existing.scalar():
                return await message.answer("‚ö† –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            client = Client(
                fullName=form.fullName,
                passport=form.passport,
                telegram_id=message.from_user.id,
                phone_numbers=[form.phone],
                email=email,
                creditScore=300  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            )

            session.add(client)
            await session.commit()

            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"<b>–í–∞—à ID:</b> {client.clientID}\n"
                f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {client.creditScore}",
                parse_mode=ParseMode.HTML
            )

        except IntegrityError:
            await session.rollback()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(Command("my_profile"))
async def show_profile(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞"""
    async with async_session() as session:
        client = await check_client_registered(message, session)
        if not client:
            return

        safe_data = client.to_safe_schema()

        await message.answer(
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>ID:</b> {safe_data.clientID}\n"
            f"<b>–§–ò–û:</b> {safe_data.fullName}\n"
            f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {safe_data.registration_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {safe_data.creditScore}",
            parse_mode=ParseMode.HTML
        )

#–î–∞–ª–µ–µ –∫—Ä–µ–¥–∏—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏

#–ü–†–û–°–ú–û–¢–† –ü–õ–ê–ù–ê –ü–õ–ê–¢–ï–ñ–ï–ô –° –í–´–ë–û–†–û–ú –ö–†–ï–î–ò–¢–ê 
@router.message(Command("payments_plan"))
async def choose_loan_for_schedule(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        async with async_session() as session:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
            client = await check_client_registered(message, session)
            if not client:
                return

            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            active_loans = await session.scalars(
                select(Loan)
                .where(
                    (Loan.client_id == client.clientID) &
                    (Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE]))
                )
                .order_by(Loan.loan_id.asc())
            )
            active_loans = active_loans.all()
        
        if not active_loans:
            await message.answer("‚Ñπ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–ö—Ä–µ–¥–∏—Ç #{loan.loan_id} –Ω–∞ {loan.amount:.2f} —Ä—É–±.",
                        callback_data=f"show_schedule_{loan.loan_id}"
                    )
                ]
                for loan in active_loans
            ]
        )
        
        await message.answer(
            "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤.")

@router.callback_query(F.data.startswith("show_schedule_"))
async def show_schedule_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–µ–¥–∏—Ç—É"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        async with async_session() as session:
            loan_id_str = callback.data.replace("show_schedule_", "")
            if not loan_id_str.isdigit():
                await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–µ–¥–∏—Ç–∞")
                return

            loan_id = int(loan_id_str)

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–µ—Å—Å–∏–µ–π
            success = await show_payment_schedule(callback.message, loan_id, session)

            if success:
                await callback.answer()
            else:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_schedule_handler: {e}", exc_info=True)
        await callback.message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

#–ü–†–û–°–ú–û–¢–† –ö–†–ï–î–ò–¢–û–í
@router.message(Command("my_loans"))
async def show_client_loans(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫—Ä–µ–¥–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    async with async_session() as session:
        client = await check_client_registered(message, session)
        if not client:
            return

        loans = await session.execute(
            select(Loan)
            .where(Loan.client_id == client.clientID)
            .order_by(Loan.issue_date.desc())
        )
        loans = loans.scalars().all()

        if not loans:
            return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤")
            
        response = ["üìã <b>–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:</b>"]
        
        for loan in loans:
            status_emoji = "üü¢" if loan.status == LoanStatus.ACTIVE else "üî¥"
            response.append(
                f"{status_emoji} <b>–ö—Ä–µ–¥–∏—Ç #{loan.loan_id}</b>\n"
                f"–°—É–º–º–∞: {loan.amount} —Ä—É–±.\n"
                f"–°—Ç–∞—Ç—É—Å: {loan.status.value}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {loan.remaining_amount} —Ä—É–±."
            )

        await message.answer(
            "\n\n".join(response),
            parse_mode=ParseMode.HTML
        )

#–í–´–î–ê–ß–ê –ö–†–ï–î–ò–¢–û–í
@router.message(Command("take_loan"))
async def start_loan_process(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        client = await check_client_registered(message, session)
        if not client:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        active_loans = await session.execute(
            select(func.count(Loan.loan_id))
            .where(
                and_(
                    Loan.client_id == client.clientID,
                    Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE])
                )
            )
        )
        
        if active_loans.scalar() > 0:
            return await message.answer(
                "‚ùå –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã. "
                "–ù–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω."
            )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
        loan_types = await session.execute(select(LoanType))
        loan_types = loan_types.scalars().all()

        if not loan_types:
            return await message.answer("‚ö† –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=f"{lt.name} ({lt.interest_rate}%)")] 
                for lt in loan_types
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞:</b>",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await state.set_state(LoanStates.choose_loan_type)

@router.message(LoanStates.choose_loan_type)
async def process_loan_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞
            loan_type_name = message.text.split('(')[0].strip()
            loan_type = await session.execute(
                select(LoanType)
                .where(LoanType.name == loan_type_name)
            )
            loan_type = loan_type.scalar()

            if not loan_type:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data({
                'loan_type_id': loan_type.type_id,
                'min_amount': loan_type.min_amount,
                'max_amount': loan_type.max_amount,
                'min_term': loan_type.min_term,
                'max_term': loan_type.max_term,
                'interest_rate': loan_type.interest_rate
            })
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞
            await message.answer(
                f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–æ—Ç {loan_type.min_amount} –¥–æ {loan_type.max_amount} —Ä—É–±.):",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(LoanStates.enter_amount)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞: {e}")
            await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()

@router.message(LoanStates.enter_amount)
async def process_loan_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞"""
    try:
        data = await state.get_data()
        amount = Decimal(message.text.replace(',', '.'))
        
        if amount < data['min_amount'] or amount > data['max_amount']:
            raise ValueError(
                f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {data['min_amount']} –¥–æ {data['max_amount']} —Ä—É–±."
            )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É
        async with async_session() as session:
            client = await session.execute(
                select(Client)
                .where(Client.telegram_id == message.from_user.id)
            )
            client = client.scalar()

            max_allowed = await calculate_max_loan_amount(client.clientID, session)
            if amount > max_allowed:
                raise ValueError(
                    f"–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑—è—Ç—å –º–∞–∫—Å–∏–º—É–º {max_allowed} —Ä—É–±."
                )

        await state.update_data({'amount': amount})
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞
        await message.answer(
            f"‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö (–æ—Ç {int(data['min_term'])} –¥–æ {int(data['max_term'])}):"
        )
        await state.set_state(LoanStates.enter_term)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(LoanStates.enter_term)
async def process_loan_term(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞"""
    try:
        term = int(message.text)
        data = await state.get_data()
        
        if term < data['min_term'] or term > data['max_term']:
            raise ValueError(
                f"–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {data['min_term']} –¥–æ {data['max_term']} –º–µ—Å—è—Ü–µ–≤"
            )

        await state.update_data({'term': term})
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        monthly_payment = calculate_monthly_payment(
            data['amount'],
            term,
            data['interest_rate']
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç–∞:</b>\n\n"
            f"–¢–∏–ø: {message.text.split('(')[0].strip()}\n"
            f"–°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
            f"–°—Ä–æ–∫: {term} –º–µ—Å.\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {data['interest_rate']}%\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: ~{monthly_payment:.2f} —Ä—É–±.\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞?",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await state.set_state(LoanStates.confirm_loan)

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(LoanStates.confirm_loan, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_loan(message: types.Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞"""
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = await check_client_registered(message, session)
            if not client:
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç
            new_loan = Loan(
                client_id=client.clientID,
                loan_type_id=data['loan_type_id'],
                issue_date=datetime.utcnow(),
                amount=Decimal(data['amount']),
                term=data['term'],
                status=LoanStatus.ACTIVE,
                total_paid=Decimal('0.00'),
                remaining_amount=Decimal(data['amount'])
            )
            
            session.add(new_loan)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º loan_id
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
            
            payments = await generate_payment_schedule(
                loan_id=new_loan.loan_id,
                amount=Decimal(data['amount']),
                term=data['term'],
                interest_rate=data['interest_rate'],
                start_date=datetime.utcnow().date(),
                session=session
            )   
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –≤ —Å–µ—Å—Å–∏—é
            if payments:
                for payment in payments:
                    session.add(payment)
            else:
                logging.error("–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞
            client.creditScore = min(1000, client.creditScore + 10)  # –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –≤–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
            
            await session.commit()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            monthly_payment = calculate_monthly_payment(
                Decimal(data['amount']),
                data['term'],
                data['interest_rate']
            )
            
            # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø–ª–∞—Ç–µ–∂–µ–π
            csv_file = generate_payments_csv(payments, new_loan.loan_id)

            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫—Ä–µ–¥–∏—Ç–∞
            await message.answer(
                "‚úÖ <b>–ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                f"üîπ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{new_loan.loan_id}\n"
                f"üîπ –°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
                f"üîπ –°—Ä–æ–∫: {data['term']} –º–µ—Å.\n"
                f"üîπ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {data['interest_rate']}%\n"
                f"üîπ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:.2f} —Ä—É–±.\n\n"
                "–í –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π:",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode=ParseMode.HTML
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_document(csv_file)
            
        except Exception as e:
            await session.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞: {e}", exc_info=True)
            await message.answer(
                "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        finally:
            await state.clear()

@router.message(LoanStates.confirm_loan, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_loan(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    await message.answer(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

#–í–ù–ï–°–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê –° –ü–ï–†–ï–†–ê–°–ß–ï–¢–û–ú –ü–õ–ê–¢–ï–ñ–ï–ô –ü–†–ò –°–£–ú–ú–ï –ë–û–õ–¨–®–ï–ô, –ß–ï–ú –ù–£–ñ–ù–û 
@router.message(Command("make_payment"))
async def start_payment_process(message: types.Message, state: FSMContext):
    """–ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    async with async_session() as session:
        client = await check_client_registered(message, session)
        if not client:
            return

        loans = await session.scalars(
            select(Loan)
            .where(Loan.client_id == client.clientID)
            .where(Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE])
        ))
        loans = loans.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        
        if not loans:
            return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è")

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Found {len(loans)} active loans for client {client.clientID}")

        await state.update_data(loans={loan.loan_id: loan for loan in loans})
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10 —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
        loan_buttons = [
            [types.KeyboardButton(text=f"–ö—Ä–µ–¥–∏—Ç #{l.loan_id} - {l.amount:,.2f}‚ÇΩ")] 
            for l in loans[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        loan_buttons.append([types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
        
        kb = types.ReplyKeyboardMarkup(
            keyboard=loan_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç (–¥–æ—Å—Ç—É–ø–Ω–æ {len(loans)}):",
            reply_markup=kb
        )
        await state.set_state(PaymentStates.choose_loan)

@router.message(PaymentStates.choose_loan, F.text.regexp(r'–ö—Ä–µ–¥–∏—Ç #\d+'))
async def choose_loan_for_payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –ë–î"""
    try:
        loan_id = int(message.text.split('#')[1].split()[0])
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
            loan = await session.get(Loan, loan_id)
            if not loan:
                await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É –∏–∑ –ë–î
            payments = await session.scalars(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .order_by(Payment.payment_date_plan)
            )
            payments = payments.all()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            total_paid = sum(
                Decimal(str(p.actual_amount)) 
                for p in payments 
                if p.actual_amount is not None
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞
            loan.remaining_amount = loan.amount - total_paid

            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ (–ø–µ—Ä–≤—ã–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π)
            next_payment = await session.scalar(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .where(Payment.payment_date_fact.is_(None))
                .order_by(Payment.payment_date_plan.asc())
                .limit(1)
            )

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            today = date.today()
            overdue_payments = await session.scalars(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .where(Payment.payment_date_plan < today)
                .where(Payment.payment_date_fact.is_(None))
                .order_by(Payment.payment_date_plan.asc())
            )
            overdue_payments = overdue_payments.all()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏)
            penalty_amount = Decimal('0')
            if overdue_payments:
                for payment in overdue_payments:
                    days_overdue = (today - payment.payment_date_plan).days
                    penalty_rate = Decimal('0.01')  # 1% –≤ –¥–µ–Ω—å
                    penalty = Decimal(str(payment.planned_amount)) * penalty_rate * days_overdue
                    penalty_amount += penalty

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ–Ω–∏, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
                    existing_penalty = await session.scalar(
                        select(Payment)
                        .where(Payment.loan_id == loan_id)
                        .where(Payment.penalty_date == today)
                        .where(Payment.payment_date_plan == payment.payment_date_plan)
                    )
                    
                    if not existing_penalty:
                        penalty_payment = Payment(
                            loan_id=loan_id,
                            payment_date_plan=payment.payment_date_plan,
                            planned_amount=payment.planned_amount,
                            payment_date_fact=None,
                            actual_amount=0,
                            penalty_date=today,
                            penalty_amount=float(penalty)
                        )
                        session.add(penalty_payment)
                
                await session.commit()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            await state.update_data(
                loan_id=loan_id,
                current_loan=loan,
                penalty_amount=float(penalty_amount),
                next_payment_date=next_payment.payment_date_plan if next_payment else None,
                next_payment_amount=Decimal(str(next_payment.planned_amount)) if next_payment else None
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = [
                f"<b>–ö—Ä–µ–¥–∏—Ç #{loan_id}</b>",
                f"üîπ –°—É–º–º–∞: {loan.amount:.2f} —Ä—É–±.",
                f"üîπ –°—Ä–æ–∫: {loan.term} –º–µ—Å.",
                f"üîπ –ü–æ–≥–∞—à–µ–Ω–æ: {total_paid:.2f} —Ä—É–±.",
                f"üîπ –û—Å—Ç–∞—Ç–æ–∫: {loan.remaining_amount:.2f} —Ä—É–±."
            ]

            if next_payment:
                msg.append(f"üîπ –°–ª–µ–¥. –ø–ª–∞—Ç–µ–∂: {next_payment.payment_date_plan.strftime('%d.%m.%Y')}")
                msg.append(f"üîπ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {next_payment.planned_amount:.2f} —Ä—É–±.")
            
            if overdue_payments:
                days_overdue = (today - overdue_payments[0].payment_date_plan).days
                msg.append(f"‚ö† <b>–ü—Ä–æ—Å—Ä–æ—á–∫–∞:</b> {days_overdue} –¥–Ω–µ–π")
            
            if penalty_amount > 0:
                msg.append(f"‚ö† <b>–ü–µ–Ω–∏:</b> {penalty_amount:.2f} —Ä—É–±. (1%/–¥–µ–Ω—å)")

            msg.append("\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:")
            
            await message.answer(
                "\n".join(msg),
                reply_markup=types.ReplyKeyboardRemove(),
                parse_mode=ParseMode.HTML
            )
            await state.set_state(PaymentStates.enter_amount)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–µ–¥–∏—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–µ–¥–∏—Ç–∞")
        await state.clear()

@router.message(PaymentStates.enter_amount, F.text.regexp(r'^\d+(\.\d{1,2})?$'))
async def process_payment_amount(message: types.Message, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–æ–º –ø–ª–∞—Ç–µ–∂–µ–π –µ—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ'''
    try:
        amount = Decimal(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            
        data = await state.get_data()
        loan_id = data['loan_id']
        current_date = date.today()
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
            loan = await session.get(Loan, loan_id)
            if not loan:
                await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
            
            # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
            payment = await session.scalar(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .where(Payment.payment_date_fact.is_(None))
                .order_by(Payment.payment_date_plan.asc())
                .limit(1)
            )
            
            if not payment:
                await message.answer("‚Ñπ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è")
                await state.clear()
                return
            
            min_payment = Decimal(str(payment.planned_amount))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å—É–º–º—ã –¥–æ–ª–≥–∞
            if amount > loan.remaining_amount:
                amount = loan.remaining_amount
                await message.answer(
                    f"‚ö† –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞. –ë—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} —Ä—É–±."
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            if round(amount, 2) > round(min_payment, 2):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(proposed_amount=amount)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å",
                            callback_data="confirm_recalculate"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É",
                            callback_data="enter_new_amount"
                        )
                    ]
                ])
                
                await message.answer(
                    f"‚Ñπ –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ ({amount:.2f} —Ä—É–±.) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ({min_payment:.2f} —Ä—É–±.).\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
            if round(amount, 2) < round(min_payment, 2):
                await message.answer(
                    f"‚ùå –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ ({amount:.2f} —Ä—É–±.) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ({min_payment:.2f} —Ä—É–±.).\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, —Ä–∞–≤–Ω—É—é –∏–ª–∏ –±–æ–ª—å—à—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
            await update_payment_and_loan(session, payment, loan, amount, current_date, loan_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç
            if loan.remaining_amount <= 0:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫—Ä–µ–¥–∏—Ç
                loan.remaining_amount = Decimal('0')
                loan.next_payment_date = None
                loan.status = LoanStatus.CLOSED  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                await session.execute(
                    delete(Payment)
                    .where(Payment.loan_id == loan_id)
                    .where(Payment.payment_date_fact.is_(None))
                )
                await session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_msg = (
                "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
                f"üîπ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{loan_id}\n"
                f"üîπ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount:.2f} —Ä—É–±.\n"
                f"üîπ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {loan.remaining_amount:.2f} —Ä—É–±.\n"
                f"üîπ –°–ª–µ–¥. –ø–ª–∞—Ç–µ–∂: {loan.next_payment_date.strftime('%d.%m.%Y') if loan.next_payment_date else '–Ω–µ—Ç'}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂!"
            )
            
            await message.answer(response_msg, parse_mode=ParseMode.HTML)
            await state.clear()
            
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.callback_query(F.data == "confirm_recalculate")
async def confirm_recalculate(callback: types.CallbackQuery, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—É–º–º—ã —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø–ª–∞—Ç–µ–∂–µ–π'''
    try:
        data = await state.get_data()
        amount = Decimal(data['proposed_amount'])
        loan_id = data['loan_id']
        current_date = date.today()
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º
            loan = await session.get(Loan, loan_id, options=[joinedload(Loan.loan_type)])
            if not loan:
                await callback.message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
            if not loan.loan_type or not hasattr(loan.loan_type, 'interest_rate'):
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ –∫—Ä–µ–¥–∏—Ç—É")
                await state.clear()
                return
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            payment = await session.scalar(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .where(Payment.payment_date_fact.is_(None))
                .order_by(Payment.payment_date_plan.asc())
                .limit(1)
            )
            
            if not payment:
                await callback.message.answer("‚Ñπ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è")
                await state.clear()
                return
            
            # 1. –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
            payment.payment_date_fact = current_date
            payment.actual_amount = amount
            
            # 2. –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            remaining_amount = loan.remaining_amount - amount
            
            # 3. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            await session.execute(
                delete(Payment)
                .where(Payment.loan_id == loan_id)
                .where(Payment.payment_date_plan > payment.payment_date_plan)
                .where(Payment.payment_date_fact.is_(None))
            )
            
            # 4. –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Å—Ä–æ–∫
            remaining_term = loan.term - (await session.scalar(
                select(func.count(Payment.payment_id))
                .where(
                    (Payment.loan_id == loan_id) &
                    (Payment.payment_date_fact.is_not(None))
                )
            ))
            
            # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            last_payment = await session.scalar(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .order_by(Payment.payment_date_plan.desc())
                .limit(1))
            start_date = last_payment.payment_date_plan if last_payment else date.today()

            
            # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
            new_payments = await generate_payment_schedule(
                loan_id=loan_id,
                amount=remaining_amount,
                term=remaining_term,
                interest_rate=loan.loan_type.interest_rate,
                start_date=start_date,
                session=session
            )

            
            # 7. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–∞
            loan.remaining_amount = remaining_amount
            loan.next_payment_date = new_payments[0].payment_date_plan if new_payments else None

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫—Ä–µ–¥–∏—Ç, –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ 0
            if loan.remaining_amount <= 0:
                loan.status = LoanStatus.CLOSED  # –ï—Å–ª–∏ —Ç–∞–∫–æ–µ –ø–æ–ª–µ –µ—Å—Ç—å
                loan.next_payment_date = None

            # 8. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_msg = (
                "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!</b>\n\n"
                f"üîπ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{loan_id}\n"
                f"üîπ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount:.2f} —Ä—É–±.\n"
                f"üîπ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {remaining_amount:.2f} —Ä—É–±.\n"
                f"üîπ –°–ª–µ–¥. –ø–ª–∞—Ç–µ–∂: {loan.next_payment_date.strftime('%d.%m.%Y') if loan.next_payment_date else '–Ω–µ—Ç'}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂!"
            )
            
            await callback.message.edit_text(response_msg, parse_mode=ParseMode.HTML)
            await state.clear()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await callback.message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == "enter_new_amount")
async def enter_new_amount(callback: types.CallbackQuery, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã'''
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:")
    await state.set_state(PaymentStates.enter_amount)

#–í–´–î–ê–ß–ê –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ù–ê –ö–†–ï–î–ò–¢
@router.message(Command("check_credit"))
async def check_credit_status(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    async with async_session() as session:
        client = await check_client_registered(message, session)
        if not client:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
        active_or_overdue_loans = await session.scalars(
            select(Loan).where(
                Loan.client_id == client.clientID,
                Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE])
            )
        )
        loans_list = active_or_overdue_loans.all()
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞
        credit_score = client.creditScore  
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫—Ä–µ–¥–∏—Ç–∞
        credit_status = get_credit_status(credit_score)
        max_credit_amount = get_max_credit_amount(credit_score)
        credit_advice = get_credit_advice(credit_score)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = [
            f"üìù <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—ã–¥–∞—á—É –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è {client.fullName}:</b>",
            f"üîπ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {credit_score}",
            f"üîπ –°—Ç–∞—Ç—É—Å: {credit_status}",
            f"üîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å: {max_credit_amount:.2f} —Ä—É–±.",
            "\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</b>",
            credit_advice
        ]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if loans_list:
            msg.append("\n‚ùå –û–¢–ö–ê–ó–ê–ù–û –í –í–´–î–ê–ß–ï\n –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏. "
                       "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç –¥–æ –∏—Ö –∑–∞–∫—Ä—ã—Ç–∏—è.")
        else:
            msg.append("\n‚úÖ –í–´–î–ê–ß–ê –ö–†–ï–î–ò–¢–ê –†–ê–ó–†–ï–®–ï–ù–ê\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "\n".join(msg),
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )

#–î–û–°–†–û–ß–ù–û–ï –ü–û–ì–ê–®–ï–ù–ò–ï –ö–†–ï–î–ò–¢–ê(–õ–ò–ë–û –£–ú–ï–ù–¨–®–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ê –ü–õ–ê–¢–ï–ñ–ê –õ–ò–ë–û –£–ú–ï–ù–¨–®–ï–ù–ò–ï –ö–û–õ-–í–ê –ü–õ–ê–¢–ï–ñ–ï–ô)
@router.message(Command("early_repayment"))
async def start_early_repayment_process(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    async with async_session() as session:
        client = await check_client_registered(message, session)
        if not client:
            return

        loans = await session.scalars(
            select(Loan)
            .where(Loan.client_id == client.clientID,
            Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE]))
        )
        loans = loans.all()
        
        if not loans:
            return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è")

        await state.update_data(loans={loan.loan_id: loan for loan in loans})
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤
        loan_buttons = [
            [types.KeyboardButton(text=f"–ö—Ä–µ–¥–∏—Ç #{l.loan_id} - {l.amount:,.2f}‚ÇΩ")] 
            for l in loans[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        ]
        loan_buttons.append([types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
        
        kb = types.ReplyKeyboardMarkup(
            keyboard=loan_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
            reply_markup=kb
        )
        await state.set_state(EarlyRepaymentStates.choose_loan)

@router.message(EarlyRepaymentStates.choose_loan, F.text.regexp(r'–ö—Ä–µ–¥–∏—Ç #\d+'))
async def choose_loan_for_early_repayment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    try:
        loan_id = int(message.text.split('#')[1].split()[0])
        
        async with async_session() as session:
            loan = await session.get(Loan, loan_id, options=[joinedload(Loan.loan_type)])
            if not loan:
                await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
            payments = await session.scalars(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .order_by(Payment.payment_date_plan)
            )
            payments = payments.all()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            total_paid = sum(
                Decimal(str(p.actual_amount)) 
                for p in payments 
                if p.actual_amount is not None
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞
            loan.remaining_amount = loan.amount - total_paid
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await state.update_data(
                loan_id=loan_id,
                current_loan=loan,
                remaining_amount=loan.remaining_amount
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π")],
                    [types.KeyboardButton(text="–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞")],
                    [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            
            await message.answer(
                f"<b>–ö—Ä–µ–¥–∏—Ç #{loan_id}</b>\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {loan.remaining_amount:.2f}‚ÇΩ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
            await state.set_state(EarlyRepaymentStates.choose_type)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–µ–¥–∏—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–µ–¥–∏—Ç–∞")
        await state.clear()

@router.message(EarlyRepaymentStates.choose_type, F.text.in_(["–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π", "–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞"]))
async def choose_early_repayment_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è"""
    try:
        repayment_type = message.text
        data = await state.get_data()
        loan_id = data['loan_id']
        
        await state.update_data(repayment_type=repayment_type)
        
        if repayment_type == "–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π":
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.set_state(EarlyRepaymentStates.enter_amount)
        else:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.set_state(EarlyRepaymentStates.enter_amount)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await state.clear()


@router.message(EarlyRepaymentStates.enter_amount, F.text.regexp(r'^\d+(\.\d{1,2})?$'))
async def process_early_repayment_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    response_msg = None
    try:
        amount = Decimal(message.text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
        
        data = await state.get_data()
        loan_id = data['loan_id']
        repayment_type = data['repayment_type']
        current_date = date.today()
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç —Å —Ç–∏–ø–æ–º (–¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏)
            loan = await session.get(Loan, loan_id, options=[joinedload(Loan.loan_type)])
            if not loan:
                await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
            
            if amount > loan.remaining_amount:
                amount = loan.remaining_amount
                await message.answer(
                    f"‚ö† –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞. –ë—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} —Ä—É–±."
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
            payments = await session.scalars(
                select(Payment)
                .where(Payment.loan_id == loan_id)
                .order_by(Payment.payment_date_plan.asc())
            )
            payments_list = list(payments)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º –ø–æ–≥–∞—à–µ–Ω–∏–∏
            early_payment = Payment(
                loan_id=loan_id,
                payment_date_plan=current_date,
                planned_amount=float(amount),
                payment_date_fact=current_date,
                actual_amount=float(amount),
                is_early_payment=True
            )
            session.add(early_payment)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
            loan.remaining_amount -= amount

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            await session.execute(
                delete(Payment)
                .where(Payment.loan_id == loan_id)
                .where(Payment.payment_date_fact.is_(None))
            )

            if loan.remaining_amount <= 0:
                loan.status = "CLOSED"
                loan.next_payment_date = None
                response_msg = (
                    "‚úÖ <b>–ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!</b>\n\n"
                    f"üîπ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{loan_id}\n"
                    f"üîπ –°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {amount:.2f} —Ä—É–±.\n"
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª–Ω—ã–º –ø–æ–≥–∞—à–µ–Ω–∏–µ–º –∫—Ä–µ–¥–∏—Ç–∞!"
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                paid_payments_count = len([p for p in payments_list if p.payment_date_fact is not None])
                remaining_term = loan.term - paid_payments_count

                # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                last_paid_date = max(
                    p.payment_date_plan 
                    for p in payments_list 
                    if p.payment_date_fact is not None
                ) if any(p.payment_date_fact is not None for p in payments_list) else loan.issue_date

                if repayment_type == "–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞":
                    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –Ω–æ–≤—ã–º —Å—Ä–æ–∫–æ–º
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Å—Ç–∞—Ç–∫—É
                    original_term = loan.term
                    original_amount = Decimal(str(loan.amount))
                    paid_ratio = (original_amount - loan.remaining_amount) / original_amount
                    new_term = max(1, math.floor(remaining_term * (1 - paid_ratio)))
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                    new_payments = await generate_payment_schedule(
                        loan_id=loan_id,
                        amount=loan.remaining_amount,
                        term=new_term,
                        interest_rate=loan.loan_type.interest_rate,
                        start_date=last_paid_date,
                        session=session
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞
                    new_monthly_payment = Decimal(str(new_payments[0].planned_amount)) if new_payments else Decimal('0')
                    
                    response_msg = (
                        "‚úÖ <b>–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!</b>\n\n"
                        f"üîπ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{loan_id}\n"
                        f"üîπ –°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {amount:.2f} —Ä—É–±.\n"
                        f"üîπ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {loan.remaining_amount:.2f} —Ä—É–±.\n"
                        f"üîπ –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ —Å–æ–∫—Ä–∞—â–µ–Ω.\n"
                        f"üîπ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_term} –ø–ª–∞—Ç–µ–∂(–∞).\n"
                        f"üîπ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: {new_monthly_payment:.2f} —Ä—É–±."
                    )
                else:
                    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø–æ –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–π —Å—Ö–µ–º–µ
                    new_payments = await generate_payment_schedule(
                        loan_id=loan_id,
                        amount=loan.remaining_amount,
                        term=remaining_term,
                        interest_rate=loan.loan_type.interest_rate,
                        start_date=last_paid_date,
                        session=session
                    )

                    new_monthly_payment = Decimal(str(new_payments[0].planned_amount)) if new_payments else Decimal('0')

                    response_msg = (
                        "‚úÖ <b>–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!</b>\n\n"
                        f"üîπ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{loan_id}\n"
                        f"üîπ –°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {amount:.2f} —Ä—É–±.\n"
                        f"üîπ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {loan.remaining_amount:.2f} —Ä—É–±.\n"
                        f"üîπ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: {new_monthly_payment:.2f} —Ä—É–±.\n"
                        f"üîπ –°—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {remaining_term} –º–µ—Å."
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                first_future_payment = await session.scalar(
                    select(Payment)
                    .where(Payment.loan_id == loan_id)
                    .where(Payment.payment_date_fact.is_(None))
                    .order_by(Payment.payment_date_plan.asc())
                    .limit(1)
                )
                loan.next_payment_date = first_future_payment.payment_date_plan if first_future_payment else None

            await session.commit()
            await message.answer(response_msg, parse_mode=ParseMode.HTML)
            await state.clear()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º –ø–æ–≥–∞—à–µ–Ω–∏–∏: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

#–ü–ï–†–ï–†–ê–°–ß–ï–¢ –° –£–ß–ï–¢–û–ú –ü–ï–ù–ù–ò
@router.message(Command("calculate_penny"))
async def calculate_penny(message: types.Message):
    try:
        current_date = date.today()
        penalties_applied = False

        async with async_session() as session:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
            client = await check_client_registered(message, session)
            if not client:
                return

            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç—ã —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            result = await session.scalars(
                select(Loan)
                .where(
                    (Loan.client_id == client.clientID) &
                    (Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE]))
                )
            )
            loans = list(result)

            if not loans:
                await message.answer("‚Ñπ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.")
                return

            for loan in loans:
                loan_overdue = False
                total_penalty = Decimal('0.00')

                payments = await session.scalars(
                    select(Payment)
                    .where(Payment.loan_id == loan.loan_id)
                    .order_by(Payment.payment_date_plan)
                )
                payments_list = list(payments)

                for payment in payments_list:
                    if not payment.payment_date_fact and payment.payment_date_plan < current_date:
                        # –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
                        overdue_days = (current_date - payment.payment_date_plan).days
                        penalty = (Decimal(payment.planned_amount) * Decimal('0.01') * overdue_days).quantize(Decimal('0.01'))

                        payment.penalty_amount = float(penalty)
                        payment.penalty_date = current_date

                        loan_overdue = True
                        penalties_applied = True
                        total_penalty += penalty

                if loan_overdue:
                    loan.status = LoanStatus.OVERDUE
                    loan.remaining_amount += total_penalty

                    unpaid_payments = [p for p in payments_list if not p.payment_date_fact]

                    if not unpaid_payments:
                        continue

                    new_monthly_payment = (Decimal(loan.remaining_amount) / len(unpaid_payments)).quantize(Decimal('0.01'))

                    for payment in unpaid_payments:
                        payment.planned_amount = float(new_monthly_payment)

            await session.commit()

        if penalties_applied:
            await message.answer("‚úÖ –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–ª–∞—Ç–µ–∂–µ–π —Å —É—á–µ—Ç–æ–º –ø–µ–Ω–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω!")
        else:
            await message.answer("‚úÖ –í—Å–µ —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –ø–æ –≤–∞—à–∏–º –∫—Ä–µ–¥–∏—Ç–∞–º –Ω–µ—Ç.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–µ –ø–µ–Ω–µ–π: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–µ –ø–µ–Ω–µ–π.")

@router.message(Command("set_payment_late"))
async def set_payment_late(message: types.Message):
    try:
        async with async_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ telegram_id
            client = await check_client_registered(message, session)
            if not client:
                return

            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            payment = await session.scalar(
                select(Payment)
                .join(Loan, Payment.loan_id == Loan.loan_id)
                .where(
                    (Payment.payment_date_fact.is_(None)) &
                    (Loan.client_id == client.clientID)
                )
                .order_by(Payment.payment_date_plan)
                .limit(1)
            )

            if not payment:
                await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
                return

            # –ò–∑–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            one_month_ago = date.today() - relativedelta(months=1)
            payment.payment_date_plan = one_month_ago
            payment.payment_date_fact = None
            payment.actual_amount = 0.00
            payment.penalty_date = None
            payment.penalty_amount = 0.00

            # –ü–æ–º–µ—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
            loan = await session.get(Loan, payment.loan_id)
            if loan and loan.status == LoanStatus.ACTIVE:
                loan.status = LoanStatus.OVERDUE

            await session.commit()

        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ ID {payment.payment_id} –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{payment.loan_id} "
            f"—É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º –Ω–∞ {one_month_ago}!"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
