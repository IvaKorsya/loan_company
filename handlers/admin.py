from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, update, func
from sqlalchemy.exc import IntegrityError
from datetime import datetime, timedelta
import logging
from decimal import Decimal
import math

from utils.database import async_session
from models.user import Client, Loan
from models.base import LoanStatus, LoanType
from config import Config
from utils.commands import set_bot_commands

router = Router(name="admin_handlers")

async def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    Args:
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∏–Ω–∞—á–µ False.
    """
    return user_id in Config.ADMINS

# ---- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ----

@router.message(Command("admin"))
async def admin_auth(message: types.Message):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ï—Å–ª–∏ –¥–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Example:
        User: /admin
        Bot: üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
             –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:
    """
    if not await is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await message.answer(
        "üîê <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ReplyKeyboardRemove()
    )

@router.message(F.text == Config.ADMIN_PASSWORD)
async def admin_panel(message: types.Message, bot: Bot):
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏. –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥.

    Example:
        User: i_love_db
        Bot: üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
             [üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] [üë• –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞]
             [‚öô –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥] [üí∞ –í—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç]
             [üí∏ –ü—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂] [üîÑ –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π]
             [üìù –û—Ç—á–µ—Ç—ã]
    """
    if not await is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await set_bot_commands(bot, message.from_user.id)

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton(text="üë• –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_find_client"),
        types.InlineKeyboardButton(text="‚öô –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_change_credit"),
        types.InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç", callback_data="admin_issue_loan"),
        types.InlineKeyboardButton(text="üí∏ –ü—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="admin_process_payment"),
        types.InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="admin_recalculate_payments"),
        types.InlineKeyboardButton(text="üìù –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")
    )
    builder.adjust(2)

    await message.answer(
        "üõ† <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ----

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.

    –í—ã–≤–æ–¥–∏—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —á–∏—Å–ª–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
             ‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: 100
             ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 650.0
             ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: 2
    """
    async with async_session() as session:
        clients_count = await session.scalar(select(func.count()).select_from(Client))
        avg_score = await session.scalar(select(func.avg(Client.creditScore)))

    await callback.message.edit_text(
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>{clients_count}</b>\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_score:.1f}</b>\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{len(Config.ADMINS)}</b>",
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == "admin_find_client")
async def find_client(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üîç –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:
    """
    await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text == "üîç –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:")
async def process_client_id(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: ID, –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∫–ª–∏–µ–Ω—Ç–∞.

    Example:
        User: 42
        Bot: üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
             ‚Ä¢ ID: 42
             ‚Ä¢ –§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
             ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +79161234567
             ‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 750
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        client = await session.get(Client, int(message.text))

    if not client:
        return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await message.answer(
        f"üë§ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        f"‚Ä¢ ID: <b>{client.clientID}</b>\n"
        f"‚Ä¢ –§–ò–û: <b>{client.fullName}</b>\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{client.phone_numbers[0] if client.phone_numbers else '–ù–µ—Ç'}</b>\n"
        f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{client.creditScore}</b>",
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == "admin_change_credit")
async def change_credit_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: ‚úè –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
             –ü—Ä–∏–º–µ—Ä: 42 750
    """
    await callback.message.answer(
        "‚úè –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 42 750</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("‚úè –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞"))
async def process_credit_change(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º.

    Example:
        User: 42 750
        Bot: ‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ 42 –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 750
    """
    try:
        client_id, new_score = message.text.split()
        new_score = int(new_score)

        if not 0 <= new_score <= 1000:
            raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1000")
    except ValueError as e:
        return await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ: {str(e)}. –ü—Ä–∏–º–µ—Ä: <code>42 750</code>", parse_mode=ParseMode.HTML)

    async with async_session() as session:
        client = await session.get(Client, int(client_id))
        if not client:
            return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await session.execute(
            update(Client)
            .where(Client.clientID == int(client_id))
            .values(creditScore=new_score)
        )
        await session.commit()

    await message.answer(f"‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_score}")

@router.callback_query(F.data == "admin_issue_loan")
async def issue_loan_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üí∞ –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞, —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞, —Å—Ä–æ–∫ (–≤ –º–µ—Å—è—Ü–∞—Ö) –∏ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
             –ü—Ä–∏–º–µ—Ä: 42 500000 12 CONSUMER
    """
    await callback.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞, —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞, —Å—Ä–æ–∫ (–≤ –º–µ—Å—è—Ü–∞—Ö) –∏ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 42 500000 12 CONSUMER</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("üí∞ –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞"))
async def process_issue_loan(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–¥–∞—á—É –∫—Ä–µ–¥–∏—Ç–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤, –¥–æ–ø—É—Å—Ç–∏–º—É—é —Å—É–º–º—É, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    –∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –ø–ª–∞—Ç–µ–∂–µ–π.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–µ–¥–∏—Ç–∞.

    Example:
        User: 42 500000 12 CONSUMER
        Bot: ‚úÖ –ö—Ä–µ–¥–∏—Ç –≤—ã–¥–∞–Ω!
             ‚Ä¢ ID –∫–ª–∏–µ–Ω—Ç–∞: 42
             ‚Ä¢ –°—É–º–º–∞: 500000 —Ä—É–±.
             ‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: 45000.00 —Ä—É–±.
             ‚Ä¢ –°—Ä–æ–∫: 12 –º–µ—Å.
    """
    try:
        client_id, amount, term, loan_type = message.text.split()
        client_id = int(client_id)
        amount = Decimal(amount)
        term = int(term)
        loan_type = LoanType[loan_type.upper()]
    except (ValueError, KeyError):
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>42 500000 12 CONSUMER</code>", parse_mode=ParseMode.HTML)

    async with async_session() as session:
        client = await session.get(Client, client_id)
        if not client:
            return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        active_loans = await session.execute(
            select(Loan).where(Loan.client_id == client_id, Loan.status == LoanStatus.ACTIVE)
        )
        if active_loans.scalars().first():
            return await message.answer("‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç")

        max_amount = calculate_max_loan_amount(client.creditScore)
        if amount > max_amount:
            return await message.answer(f"‚ùå –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç ({max_amount} —Ä—É–±.)")

        annual_rate = Decimal('0.1')
        monthly_rate = annual_rate / 12
        monthly_payment = calculate_annuity_payment(amount, monthly_rate, term)

        loan = Loan(
            client_id=client_id,
            amount=amount,
            remaining_amount=amount,
            term=term,
            annual_interest_rate=annual_rate,
            monthly_payment=monthly_payment,
            status=LoanStatus.ACTIVE,
            issue_date=datetime.now(),
            type=loan_type,
            payment_schedule=generate_payment_schedule(amount, monthly_payment, term)
        )
        session.add(loan)
        await session.commit()

        await message.answer(
            f"‚úÖ –ö—Ä–µ–¥–∏—Ç –≤—ã–¥–∞–Ω!\n"
            f"‚Ä¢ ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}\n"
            f"‚Ä¢ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:.2f} —Ä—É–±.\n"
            f"‚Ä¢ –°—Ä–æ–∫: {term} –º–µ—Å."
        )

@router.callback_query(F.data == "admin_process_payment")
async def process_payment_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üí∏ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –∏ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
             –ü—Ä–∏–º–µ—Ä: 123 50000
    """
    await callback.message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –∏ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 123 50000</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("üí∏ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞"))
async def process_payment(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç—É.

    –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ–Ω–∏ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –∏ –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∫—Ä–µ–¥–∏—Ç–∞ –∏ —Å—É–º–º–æ–π –ø–ª–∞—Ç–µ–∂–∞.

    Example:
        User: 123 50000
        Bot: ‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!
             ‚Ä¢ –°—É–º–º–∞: 50000 —Ä—É–±.
             ‚Ä¢ –ü–µ–Ω–∏: 1000 —Ä—É–±.
             ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: 450000 —Ä—É–±.
    """
    try:
        loan_id, payment = message.text.split()
        loan_id = int(loan_id)
        payment = Decimal(payment)
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>123 50000</code>", parse_mode=ParseMode.HTML)

    async with async_session() as session:
        loan = await session.get(Loan, loan_id)
        if not loan:
            return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if loan.status != LoanStatus.ACTIVE:
            return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

        schedule = loan.payment_schedule
        current_date = datetime.now()

        overdue_payments = [
            p for p in schedule if p['date'] < current_date and not p['paid']
        ]
        penalty = sum(p['amount'] * Decimal('0.01') * (current_date - p['date']).days for p in overdue_payments)

        total_payment = payment - penalty
        if total_payment < 0:
            return await message.answer(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –ø–µ–Ω–∏ ({penalty} —Ä—É–±.)")

        loan.remaining_amount -= total_payment
        for p in schedule:
            if not p['paid'] and total_payment >= p['amount']:
                p['paid'] = True
                total_payment -= p['amount']
                p['payment_date'] = current_date
            if total_payment <= 0:
                break

        if loan.remaining_amount <= 0:
            loan.status = LoanStatus.CLOSED
            await session.commit()
            await generate_no_obligations_doc(loan)
            return await message.answer("‚úÖ –ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!")

        if total_payment > 0:
            loan.payment_schedule = recalculate_payment_schedule(loan, total_payment)
        
        await session.commit()

        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!\n"
            f"‚Ä¢ –°—É–º–º–∞: {payment} —Ä—É–±.\n"
            f"‚Ä¢ –ü–µ–Ω–∏: {penalty} —Ä—É–±.\n"
            f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {loan.remaining_amount} —Ä—É–±."
        )

@router.callback_query(F.data == "admin_recalculate_payments")
async def recalculate_payments_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üîÑ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π:
    """
    await callback.message.answer(
        "üîÑ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π:",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("üîÑ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞"))
async def process_recalculate_payments(message: types.Message):
    """
    –ü–µ—Ä–µ—Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Å—Ä–æ—á–µ–∫.

    –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ–Ω–∏ (1% –≤ —Å—É—Ç–∫–∏) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–≤–µ—Å—Ç–∫—É –≤ —Å—É–¥ –ø—Ä–∏ ‚â•3 –ø—Ä–æ—Å—Ä–æ—á–∫–∞—Ö.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∫—Ä–µ–¥–∏—Ç–∞.

    Example:
        User: 123
        Bot: ‚úÖ –ü–ª–∞—Ç–µ–∂–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–∏—Ç–∞–Ω—ã!
             ‚Ä¢ –ü–µ–Ω–∏: 5000 —Ä—É–±.
             ‚Ä¢ –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: 455000 —Ä—É–±.
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        loan = await session.get(Loan, int(message.text))
        if not loan:
            return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        schedule = loan.payment_schedule
        current_date = datetime.now()

        overdue_payments = [
            p for p in schedule if p['date'] < current_date and not p['paid']
        ]
        if not overdue_payments:
            return await message.answer("‚Ñπ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")

        penalty = sum(p['amount'] * Decimal('0.01') * (current_date - p['date']).days for p in overdue_payments)
        loan.remaining_amount += penalty

        loan.payment_schedule = recalculate_payment_schedule(loan, Decimal('0'))
        await session.commit()

        if len(overdue_payments) >= 3:
            await generate_court_notice(loan)

        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–∏—Ç–∞–Ω—ã!\n"
            f"‚Ä¢ –ü–µ–Ω–∏: {penalty} —Ä—É–±.\n"
            f"‚Ä¢ –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {loan.remaining_amount} —Ä—É–±."
        )

@router.callback_query(F.data == "admin_reports")
async def reports_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –æ—Ç—á–µ—Ç–∞.

    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–∂–¥—É —Å–ø—Ä–∞–≤–∫–æ–π –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏, –ø–æ–≤–µ—Å—Ç–∫–æ–π –≤ —Å—É–¥ –∏ –≥–æ–¥–æ–≤—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–æ–º.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:
             [üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏]
             [‚öñ –ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥]
             [üìÖ –§–∏–Ω. –æ—Ç—á–µ—Ç –∑–∞ –≥–æ–¥]
    """
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏", callback_data="report_no_obligations"),
        types.InlineKeyboardButton(text="‚öñ –ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥", callback_data="report_court_notice"),
        types.InlineKeyboardButton(text="üìÖ –§–∏–Ω. –æ—Ç—á–µ—Ç –∑–∞ –≥–æ–¥", callback_data="report_annual")
    )
    builder.adjust(1)

    await callback.message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "report_no_obligations")
async def report_no_obligations_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üìÑ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏:
    """
    await callback.message.answer(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏:",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("üìÑ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞"))
async def process_no_obligations_report(message: types.Message):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–∫—É –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω, –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–∫—É.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∫—Ä–µ–¥–∏—Ç–∞.

    Example:
        User: 123
        Bot: ‚úÖ –°–ø—Ä–∞–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        loan = await session.get(Loan, int(message.text))
        if not loan or loan.status != LoanStatus.CLOSED:
            return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–≥–∞—à–µ–Ω")

        await generate_no_obligations_doc(loan)
        await message.answer("‚úÖ –°–ø—Ä–∞–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!")

@router.callback_query(F.data == "report_court_notice")
async def report_court_notice_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: ‚öñ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥:
    """
    await callback.message.answer(
        "‚öñ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥:",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("‚öñ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞"))
async def process_court_notice_report(message: types.Message):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–≤–µ—Å—Ç–∫—É –≤ —Å—É–¥.

    –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∫—Ä–µ–¥–∏—Ç–∞.

    Example:
        User: 123
        Bot: ‚úÖ –ü–æ–≤–µ—Å—Ç–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        loan = await session.get(Loan, int(message.text))
        if not loan:
            return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await generate_court_notice(loan)
        await message.answer("‚úÖ –ü–æ–≤–µ—Å—Ç–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!")

@router.callback_query(F.data == "report_annual")
async def report_annual_start(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞.

    Args:
        callback (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.

    Example:
        Bot: üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞:
             –ü—Ä–∏–º–µ—Ä: 2024
    """
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 2024</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥"))
async def process_annual_report(message: types.Message):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –≥–æ–¥.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤, –ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö —Å—É–º–º –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–µ–Ω–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–¥–æ–º.

    Example:
        User: 2024
        Bot: üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ 2024 –≥–æ–¥
             ‚Ä¢ –í—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: 10000000 —Ä—É–±.
             ‚Ä¢ –ü–æ–≥–∞—à–µ–Ω–æ: 5000000 —Ä—É–±.
             ‚Ä¢ –ü–µ–Ω–∏: 50000 —Ä—É–±.
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    year = int(message.text)
    async with async_session() as session:
        loans = await session.execute(
            select(Loan).where(
                func.extract('year', Loan.issue_date) == year
            )
        )
        loans = loans.scalars().all()

        total_issued = sum(loan.amount for loan in loans)
        total_repaid = sum(
            sum(p['amount'] for p in loan.payment_schedule if p['paid'])
            for loan in loans
        )
        penalties = sum(
            sum(p['amount'] * Decimal('0.01') * (datetime.now() - p['date']).days
                for p in loan.payment_schedule
                if not p['paid'] and p['date'] < datetime.now())
            for loan in loans
        )

        report = (
            f"üìä <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ {year} –≥–æ–¥</b>\n\n"
            f"‚Ä¢ –í—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_issued} —Ä—É–±.\n"
            f"‚Ä¢ –ü–æ–≥–∞—à–µ–Ω–æ: {total_repaid} —Ä—É–±.\n"
            f"‚Ä¢ –ü–µ–Ω–∏: {penalties} —Ä—É–±."
        )

        await message.answer(report, parse_mode=ParseMode.HTML)

# ---- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----

def calculate_max_loan_amount(credit_score: int) -> Decimal:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É.

    Args:
        credit_score (int): –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ (0‚Äì1000).

    Returns:
        Decimal: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –≤ —Ä—É–±–ª—è—Ö.

    Example:
        >>> calculate_max_loan_amount(850)
        Decimal('1000000')
    """
    if credit_score >= 800:
        return Decimal('1000000')
    elif credit_score >= 600:
        return Decimal('500000')
    elif credit_score >= 400:
        return Decimal('200000')
    else:
        return Decimal('50000')

def calculate_annuity_payment(principal: Decimal, monthly_rate: Decimal, term: int) -> Decimal:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂.

    Args:
        principal (Decimal): –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞.
        monthly_rate (Decimal): –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞.
        term (int): –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö.

    Returns:
        Decimal: –†–∞–∑–º–µ—Ä –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.

    Example:
        >>> calculate_annuity_payment(Decimal('500000'), Decimal('0.008333'), 12)
        Decimal('45000.00')
    """
    if monthly_rate == 0:
        return principal / term
    x = (1 + monthly_rate) ** term
    return principal * (monthly_rate * x) / (x - 1)

def generate_payment_schedule(principal: Decimal, monthly_payment: Decimal, term: int) -> list:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π.

    Args:
        principal (Decimal): –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞.
        monthly_payment (Decimal): –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂.
        term (int): –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö.

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞—Ç–∞–º–∏, —Å—É–º–º–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–µ–π.

    Example:
        >>> generate_payment_schedule(Decimal('500000'), Decimal('45000'), 12)
        [{'date': ..., 'amount': Decimal('45000'), 'paid': False, 'payment_date': None}, ...]
    """
    schedule = []
    remaining = principal
    current_date = datetime.now()

    for i in range(term):
        schedule.append({
            'date': current_date + timedelta(days=30 * (i + 1)),
            'amount': monthly_payment,
            'paid': False,
            'payment_date': None
        })
        remaining -= monthly_payment
        if remaining <= 0:
            break

    return schedule

def recalculate_payment_schedule(loan: Loan, extra_payment: Decimal) -> list:
    """
    –ü–µ—Ä–µ—Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π.

    –£—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.

    Args:
        loan (Loan): –û–±—ä–µ–∫—Ç –∫—Ä–µ–¥–∏—Ç–∞.
        extra_payment (Decimal): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞.

    Returns:
        list: –ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π.

    Example:
        >>> recalculate_payment_schedule(loan, Decimal('10000'))
        [{'date': ..., 'amount': Decimal('43000'), 'paid': False, 'payment_date': None}, ...]
    """
    remaining = loan.remaining_amount - extra_payment
    monthly_rate = loan.annual_interest_rate / 12
    remaining_term = sum(1 for p in loan.payment_schedule if not p['paid'])

    if remaining_term <= 0 or remaining <= 0:
        return loan.payment_schedule

    new_monthly_payment = calculate_annuity_payment(remaining, monthly_rate, remaining_term)
    current_date = datetime.now()

    new_schedule = [
        p for p in loan.payment_schedule if p['paid']
    ]
    for i in range(remaining_term):
        new_schedule.append({
            'date': current_date + timedelta(days=30 * (i + 1)),
            'amount': new_monthly_payment,
            'paid': False,
            'payment_date': None
        })

    return new_schedule

async def generate_no_obligations_doc(loan: Loan):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–∫—É –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.

    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞.

    Args:
        loan (Loan): –û–±—ä–µ–∫—Ç –∫—Ä–µ–¥–∏—Ç–∞.

    Example:
        Bot: üìÑ –°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
             ‚Ä¢ –ö–ª–∏–µ–Ω—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
             ‚Ä¢ –ö—Ä–µ–¥–∏—Ç ‚Ññ123
             ‚Ä¢ –°—É–º–º–∞: 500000 —Ä—É–±.
             ‚Ä¢ –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: 23.04.2025
             ‚Ä¢ –°—Ç–∞—Ç—É—Å: –ü–æ–≥–∞—à–µ–Ω
    """
    async with async_session() as session:
        client = await session.get(Client, loan.client_id)
        doc = (
            f"üìÑ <b>–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤</b>\n\n"
            f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç: {client.fullName}\n"
            f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç ‚Ññ{loan.loan_id}\n"
            f"‚Ä¢ –°—É–º–º–∞: {loan.amount} —Ä—É–±.\n"
            f"‚Ä¢ –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {datetime.now().strftime('%d.%m.%Y')}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –ü–æ–≥–∞—à–µ–Ω"
        )
        logging.info(f"–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞ {loan.loan_id} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")

async def generate_court_notice(loan: Loan):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–≤–µ—Å—Ç–∫—É –≤ —Å—É–¥.

    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–≤–µ—Å—Ç–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏.

    Args:
        loan (Loan): –û–±—ä–µ–∫—Ç –∫—Ä–µ–¥–∏—Ç–∞.

    Example:
        Bot: ‚öñ –ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥
             ‚Ä¢ –ö–ª–∏–µ–Ω—Ç: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
             ‚Ä¢ –ö—Ä–µ–¥–∏—Ç ‚Ññ123
             ‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: 150000 —Ä—É–±.
             ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: 3
             ‚Ä¢ –î–∞—Ç–∞: 23.04.2025
    """
    async with async_session() as session:
        client = await session.get(Client, loan.client_id)
        overdue_payments = [p for p in loan.payment_schedule if not p['paid'] and p['date'] < datetime.now()]
        total_overdue = sum(p['amount'] for p in overdue_payments)
        doc = (
            f"‚öñ <b>–ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥</b>\n\n"
            f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç: {client.fullName}\n"
            f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç ‚Ññ{loan.loan_id}\n"
            f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {total_overdue} —Ä—É–±.\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {len(overdue_payments)}\n"
            f"‚Ä¢ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}"
        )
        logging.info(f"–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–∞ {loan.loan_id} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
