from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è FSMContext
from sqlalchemy import select, update, func, and_
from sqlalchemy.orm import joinedload
from utils.commands import set_bot_commands
from utils.database import async_session
from models import Client, Loan, Payment, LoanType, LoanStatus
from config import Config
from datetime import datetime, date
from decimal import Decimal
from utils.calculations import calculate_monthly_payment, calculate_max_loan_amount
from utils.generate_files import generate_payments_csv
import logging

router = Router(name="admin_handlers")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
async def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    return user_id in Config.ADMINS

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_admin_nav_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton(text="üë• –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_find_client")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚öô –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_change_credit"),
        types.InlineKeyboardButton(text="üí≥ –í—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç", callback_data="admin_issue_loan")
    )
    builder.row(
        types.InlineKeyboardButton(text="üí∏ –ü—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="admin_make_payment"),
        types.InlineKeyboardButton(text="üîÑ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ", callback_data="admin_early_repayment")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìà –û—Ç—á—ë—Ç—ã", callback_data="admin_reports")
    )
    return builder.as_markup()

# ---- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ----

@router.message(Command("admin"))
async def admin_auth(message: types.Message):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.
    """
    if not await is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await message.answer(
        "üîê <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ReplyKeyboardRemove()
    )

@router.message(F.text == Config.ADMIN_PASSWORD)
async def admin_panel(message: types.Message, bot: Bot):
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    if not await is_admin(message.from_user.id):
        return

    await set_bot_commands(bot, message.from_user.id)

    await message.answer(
        "üõ† <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ----

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.
    """
    async with async_session() as session:
        clients_count = await session.scalar(select(func.count(Client.clientID)))
        avg_score = await session.scalar(select(func.avg(Client.creditScore)))
        total_loans = await session.scalar(select(func.count(Loan.loan_id)))
        active_loans = await session.scalar(
            select(func.count(Loan.loan_id))
            .where(Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE]))
        )

    await callback.message.edit_text(
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>{clients_count}</b>\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_score:.1f}</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: <b>{total_loans}</b>\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: <b>{active_loans}</b>\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{len(Config.ADMINS)}</b>",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(F.data == "admin_find_client")
async def find_client(callback: types.CallbackQuery):
    """
    –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID.
    """
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:")
async def process_client_id(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        client = await session.get(Client, int(message.text))

    if not client:
        return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await message.answer(
        f"üë§ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        f"‚Ä¢ ID: <b>{client.clientID}</b>\n"
        f"‚Ä¢ –§–ò–û: <b>{client.fullName}</b>\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{client.phone_numbers[0] if client.phone_numbers else '–ù–µ—Ç'}</b>\n"
        f"‚Ä¢ Email: <b>{client.email if client.email else '–ù–µ—Ç'}</b>\n"
        f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{client.creditScore}</b>",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == "admin_change_credit")
async def change_credit_start(callback: types.CallbackQuery):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """
    await callback.message.edit_text(
        "‚úè –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 42 750</i>",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:"))
async def process_credit_change(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.
    """
    try:
        client_id, new_score = message.text.split()
        new_score = int(new_score)

        if not 0 <= new_score <= 1000:
            raise ValueError("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1000")
    except:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>42 750</code>", parse_mode=ParseMode.HTML)

    async with async_session() as session:
        client = await session.get(Client, int(client_id))
        if not client:
            return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await session.execute(
            update(Client)
            .where(Client.clientID == int(client_id))
            .values(creditScore=new_score)
        )
        await session.commit()

    await message.answer(
        f"‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_score}",
        reply_markup=get_admin_nav_keyboard()
    )

@router.callback_query(F.data == "admin_issue_loan")
async def issue_loan_start(callback: types.CallbackQuery):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞.
    """
    await callback.message.edit_text(
        "üí≥ –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞:",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:")
async def check_loan_eligibility(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞ –∏ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞.
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    client_id = int(message.text)
    async with async_session() as session:
        client = await session.get(Client, client_id)
        if not client:
            return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
        active_loans = await session.scalar(
            select(func.count(Loan.loan_id))
            .where(
                and_(
                    Loan.client_id == client_id,
                    Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE])
                )
            )
        )
        if active_loans > 0:
            return await message.answer(
                "‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã. –ù–æ–≤—ã–π –∫—Ä–µ–¥–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω.",
                reply_markup=get_admin_nav_keyboard()
            )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞
        max_amount = await calculate_max_loan_amount(client_id, session)
        credit_score = client.creditScore

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—É–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        overdue_loans = await session.scalar(
            select(func.count(Payment.payment_id))
            .where(
                Payment.loan_id.in_(
                    select(Loan.loan_id).where(Loan.client_id == client_id)
                )
            )
            .where(Payment.payment_date_fact.is_(None))
            .where(Payment.payment_date_plan < date.today())
        )
        if overdue_loans > 0:
            max_amount *= Decimal('0.7')  # 70% –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏
        elif credit_score > 700:
            max_amount *= Decimal('1.2')  # 120% –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        else:
            max_amount *= Decimal('1.0')  # 100% –¥–ª—è —á–∏—Å—Ç–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
        loan_types = await session.execute(select(LoanType))
        loan_types = loan_types.scalars().all()

        if not loan_types:
            return await message.answer(
                "‚ö† –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                reply_markup=get_admin_nav_keyboard()
            )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"{lt.name} ({lt.interest_rate}%)",
                        callback_data=f"adminLoanType_{lt.type_id}_{client_id}"
                    )
                ] for lt in loan_types
            ]
        )

        await message.answer(
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client.fullName}\n"
            f"üìä –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {client.creditScore}\n"
            f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {max_amount:.2f} —Ä—É–±.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data.startswith("adminLoanType_"))
async def process_loan_type(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã.
    """
    try:
        _, type_id, client_id = callback.data.split("_")
        type_id, client_id = int(type_id), int(client_id)

        async with async_session() as session:
            loan_type = await session.get(LoanType, type_id)
            if not loan_type:
                return await callback.message.edit_text(
                    "‚ùå –¢–∏–ø –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_admin_nav_keyboard()
                )

            client = await session.get(Client, client_id)
            if not client:
                return await callback.message.edit_text(
                    "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_admin_nav_keyboard()
                )

            max_amount = await calculate_max_loan_amount(client_id, session)
            overdue_loans = await session.scalar(
                select(func.count(Payment.payment_id))
                .where(
                    Payment.loan_id.in_(
                        select(Loan.loan_id).where(Loan.client_id == client_id)
                    )
                )
                .where(Payment.payment_date_fact.is_(None))
                .where(Payment.payment_date_plan < date.today())
            )
            if overdue_loans > 0:
                max_amount *= Decimal('0.7')
            elif client.creditScore > 700:
                max_amount *= Decimal('1.2')

            await state.update_data(
                client_id=client_id,
                loan_type_id=type_id,
                max_amount=float(max_amount),
                min_amount=loan_type.min_amount,
                max_term=loan_type.max_term,
                min_term=loan_type.min_term,
                interest_rate=loan_type.interest_rate
            )

        await callback.message.edit_text(
            f"üí≥ –¢–∏–ø –∫—Ä–µ–¥–∏—Ç–∞: {loan_type.name}\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞: –æ—Ç {loan_type.min_amount} –¥–æ {max_amount:.2f} —Ä—É–±.\n"
            f"‚è≥ –°—Ä–æ–∫: –æ—Ç {loan_type.min_term} –¥–æ {loan_type.max_term} –º–µ—Å.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:",
            reply_markup=get_admin_nav_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:",
            reply_markup=types.ForceReply(selective=True)
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –∫—Ä–µ–¥–∏—Ç–∞: {e}")
        await callback.message.edit_text(
            "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_admin_nav_keyboard()
        )
        await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")
async def process_loan_amount(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å—Ä–æ–∫–∞.
    """
    try:
        amount = Decimal(message.text.replace(',', '.'))
        data = await state.get_data()

        if amount < data['min_amount'] or amount > data['max_amount']:
            return await message.answer(
                f"‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {data['min_amount']} –¥–æ {data['max_amount']} —Ä—É–±."
            )

        await state.update_data(amount=float(amount))

        await message.answer(
            f"üíµ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.\n"
            f"‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–æ—Ç {data['min_term']} –¥–æ {data['max_term']} –º–µ—Å.):",
            reply_markup=types.ForceReply(selective=True)
        )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞"))
async def process_loan_term(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    try:
        term = int(message.text)
        data = await state.get_data()

        if term < data['min_term'] or term > data['max_term']:
            return await message.answer(
                f"‚ùå –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {data['min_term']} –¥–æ {data['max_term']} –º–µ—Å—è—Ü–µ–≤"
            )

        monthly_payment = calculate_monthly_payment(
            Decimal(data['amount']),
            term,
            data['interest_rate']
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin_confirm_loan"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_cancel_loan")
                ]
            ]
        )

        await message.answer(
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç–∞:</b>\n\n"
            f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç ID: {data['client_id']}\n"
            f"‚Ä¢ –°—É–º–º–∞: {data['amount']:.2f} —Ä—É–±.\n"
            f"‚Ä¢ –°—Ä–æ–∫: {term} –º–µ—Å.\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {data['interest_rate']}%\n"
            f"‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: ~{monthly_payment:.2f} —Ä—É–±.\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await state.update_data(term=term)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.callback_query(F.data == "admin_confirm_loan")
async def confirm_loan(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞.
    """
    async with async_session() as session:
        try:
            data = await state.get_data()
            client_id = data['client_id']
            client = await session.get(Client, client_id)
            if not client:
                return await callback.message.edit_text(
                    "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_admin_nav_keyboard()
                )

            new_loan = Loan(
                client_id=client_id,
                loan_type_id=data['loan_type_id'],
                issue_date=datetime.utcnow(),
                amount=Decimal(data['amount']),
                term=data['term'],
                status=LoanStatus.ACTIVE,
                total_paid=Decimal('0.00'),
                remaining_amount=Decimal(data['amount'])
            )
            session.add(new_loan)
            await session.flush()

            from db_handlers import generate_payment_schedule
            payments = await generate_payment_schedule(
                loan_id=new_loan.loan_id,
                amount=Decimal(data['amount']),
                term=data['term'],
                interest_rate=data['interest_rate'],
                start_date=datetime.utcnow().date(),
                session=session
            )
            for payment in payments:
                session.add(payment)

            client.creditScore = min(1000, client.creditScore + 10)
            await session.commit()

            monthly_payment = calculate_monthly_payment(
                Decimal(data['amount']),
                data['term'],
                data['interest_rate']
            )
            csv_file = generate_payments_csv(payments, new_loan.loan_id)

            await callback.message.edit_text(
                "‚úÖ <b>–ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                f"‚Ä¢ –ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞: #{new_loan.loan_id}\n"
                f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç ID: {client_id}\n"
                f"‚Ä¢ –°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
                f"‚Ä¢ –°—Ä–æ–∫: {data['term']} –º–µ—Å.\n"
                f"‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:.2f} —Ä—É–±.",
                reply_markup=get_admin_nav_keyboard(),
                parse_mode=ParseMode.HTML
            )
            await callback.message.answer_document(csv_file)

        except Exception as e:
            await session.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞: {e}")
            await callback.message.edit_text(
                "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞",
                reply_markup=get_admin_nav_keyboard()
            )
        finally:
            await state.clear()
        await callback.answer()

@router.callback_query(F.data == "admin_cancel_loan")
async def cancel_loan(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞.
    """
    await callback.message.edit_text(
        "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_nav_keyboard()
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "admin_make_payment")
async def make_payment_start(callback: types.CallbackQuery):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–∞.
    """
    await callback.message.edit_text(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 42 123</i>",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞:"))
async def process_payment_info(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞.
    """
    try:
        client_id, loan_id = map(int, message.text.split())
    except:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>42 123</code>", parse_mode=ParseMode.HTML)

    async with async_session() as session:
        loan = await session.get(Loan, loan_id)
        if not loan or loan.client_id != client_id or loan.status not in [LoanStatus.ACTIVE, LoanStatus.OVERDUE]:
            return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞")

        payment = await session.scalar(
            select(Payment)
            .where(Payment.loan_id == loan_id)
            .where(Payment.payment_date_fact.is_(None))
            .order_by(Payment.payment_date_plan.asc())
        )
        if not payment:
            return await message.answer("‚ùå –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è")

        penalty_amount = Decimal(str(payment.penalty_amount or 0))
        total_due = Decimal(str(payment.planned_amount)) + penalty_amount

        await state.update_data(
            client_id=client_id,
            loan_id=loan_id,
            payment_id=payment.payment_id,
            min_payment=float(total_due)
        )

        await message.answer(
            f"üí≥ –ö—Ä–µ–¥–∏—Ç #{loan_id}\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: {payment.payment_date_plan.strftime('%d.%m.%Y')}\n"
            f"üí∞ –°—É–º–º–∞: {payment.planned_amount:.2f} —Ä—É–±.\n"
            f"‚ö† –ü–µ–Ω–∏: {penalty_amount:.2f} —Ä—É–±.\n"
            f"‚û° –ò—Ç–æ–≥–æ: {total_due:.2f} —Ä—É–±.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:",
            reply_markup=types.ForceReply(selective=True),
            parse_mode=ParseMode.HTML
        )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:"))
async def process_payment_amount(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞.
    """
    try:
        amount = Decimal(message.text)
        data = await state.get_data()
        min_payment = Decimal(str(data['min_payment']))

        if amount < min_payment:
            return await message.answer(
                f"‚ùå –°—É–º–º–∞ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ({min_payment:.2f} —Ä—É–±.)"
            )

        async with async_session() as session:
            loan = await session.get(Loan, data['loan_id'])
            payment = await session.get(Payment, data['payment_id'])

            payment.payment_date_fact = date.today()
            payment.actual_amount = float(amount)
            loan.total_paid += amount
            loan.remaining_amount -= amount

            if amount > min_payment:
                payments = await session.scalars(
                    select(Payment)
                    .where(Payment.loan_id == data['loan_id'])
                    .where(Payment.payment_date_fact.is_(None))
                    .order_by(Payment.payment_date_plan)
                )
                remaining_payments = list(payments)
                if remaining_payments:
                    remaining_term = len(remaining_payments)
                    new_monthly_payment = (loan.remaining_amount / remaining_term).quantize(Decimal('0.01'))
                    for p in remaining_payments:
                        p.planned_amount = float(new_monthly_payment)

            if loan.remaining_amount <= 0:
                loan.status = LoanStatus.CLOSED
                loan.remaining_amount = Decimal('0')
                await session.execute(
                    update(Payment)
                    .where(Payment.loan_id == data['loan_id'])
                    .where(Payment.payment_date_fact.is_(None))
                    .values(payment_date_fact=date.today(), actual_amount=0)
                )

            next_payment = await session.scalar(
                select(Payment)
                .where(Payment.loan_id == data['loan_id'])
                .where(Payment.payment_date_fact.is_(None))
                .order_by(Payment.payment_date_plan.asc())
            )
            loan.next_payment_date = next_payment.payment_date_plan if next_payment else None

            await session.commit()

        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. –∑–∞—á–∏—Å–ª–µ–Ω!\n"
            f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{data['loan_id']}: {loan.remaining_amount:.2f} —Ä—É–±.",
            reply_markup=get_admin_nav_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@router.callback_query(F.data == "admin_early_repayment")
async def early_repayment_start(callback: types.CallbackQuery):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è.
    """
    await callback.message.edit_text(
        "üîÑ –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 42 123</i>",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞:"))
async def process_early_repayment_info(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–º–µ—Ä–∞ –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è.
    """
    try:
        client_id, loan_id = map(int, message.text.split())
    except:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>42 123</code>", parse_mode=ParseMode.HTML)

    async with async_session() as session:
        loan = await session.get(Loan, loan_id, options=[joinedload(Loan.loan_type)])
        if not loan or loan.client_id != client_id or loan.status not in [LoanStatus.ACTIVE, LoanStatus.OVERDUE]:
            return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        await state.update_data(
            client_id=client_id,
            loan_id=loan_id,
            remaining_amount=float(loan.remaining_amount),
            interest_rate=loan.loan_type.interest_rate
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–£–º–µ–Ω—å—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏",
                        callback_data="admin_reduce_payment"
                    ),
                    InlineKeyboardButton(
                        text="–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ä–æ–∫",
                        callback_data="admin_reduce_term"
                    )
                ]
            ]
        )

        await message.answer(
            f"üí≥ –ö—Ä–µ–¥–∏—Ç #{loan_id}\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {loan.remaining_amount:.2f} —Ä—É–±.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )

@router.callback_query(F.data.in_(["admin_reduce_payment", "admin_reduce_term"]))
async def process_early_repayment_type(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è.
    """
    repayment_type = "reduce_payment" if callback.data == "admin_reduce_payment" else "reduce_term"
    await state.update_data(repayment_type=repayment_type)

    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
async def process_early_repayment_amount(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è.
    """
    try:
        amount = Decimal(message.text)
        data = await state.get_data()

        if amount <= 0:
            return await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

        async with async_session() as session:
            loan = await session.get(Loan, data['loan_id'], options=[joinedload(Loan.loan_type)])
            if amount > loan.remaining_amount:
                amount = loan.remaining_amount

            early_payment = Payment(
                loan_id=data['loan_id'],
                payment_date_plan=date.today(),
                planned_amount=float(amount),
                payment_date_fact=date.today(),
                actual_amount=float(amount),
                is_early_payment=True
            )
            session.add(early_payment)
            loan.remaining_amount -= amount
            loan.total_paid += amount

            await session.execute(
                update(Payment)
                .where(Payment.loan_id == data['loan_id'])
                .where(Payment.payment_date_fact.is_(None))
                .values(payment_date_fact=date.today(), actual_amount=0)
            )

            if loan.remaining_amount <= 0:
                loan.status = LoanStatus.CLOSED
                loan.next_payment_date = None
                await session.commit()
                await message.answer(
                    f"‚úÖ –ö—Ä–µ–¥–∏—Ç #{data['loan_id']} –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!\n"
                    f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±.",
                    reply_markup=get_admin_nav_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                await state.clear()
                return

            payments = await session.scalars(
                select(Payment)
                .where(Payment.loan_id == data['loan_id'])
                .where(Payment.payment_date_fact.is_(None))
                .order_by(Payment.payment_date_plan)
            )
            remaining_payments = list(payments)
            remaining_term = len(remaining_payments)

            from db_handlers import generate_payment_schedule
            if data['repayment_type'] == "reduce_payment":
                new_payments = await generate_payment_schedule(
                    loan_id=data['loan_id'],
                    amount=loan.remaining_amount,
                    term=remaining_term,
                    interest_rate=data['interest_rate'],
                    start_date=date.today(),
                    session=session
                )
                new_monthly_payment = Decimal(str(new_payments[0].planned_amount)) if new_payments else Decimal('0')
                response = (
                    f"‚úÖ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –Ω–∞ {amount:.2f} —Ä—É–±. –∑–∞—á–∏—Å–ª–µ–Ω–æ!\n"
                    f"üí≥ –ö—Ä–µ–¥–∏—Ç #{data['loan_id']}\n"
                    f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {loan.remaining_amount:.2f} —Ä—É–±.\n"
                    f"üìÖ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: {new_monthly_payment:.2f} —Ä—É–±."
                )
            else:
                original_term = loan.term
                original_amount = Decimal(str(loan.amount))
                paid_ratio = (original_amount - loan.remaining_amount) / original_amount
                new_term = max(1, round(remaining_term * (1 - paid_ratio)))
                new_payments = await generate_payment_schedule(
                    loan_id=data['loan_id'],
                    amount=loan.remaining_amount,
                    term=new_term,
                    interest_rate=data['interest_rate'],
                    start_date=date.today(),
                    session=session
                )
                new_monthly_payment = Decimal(str(new_payments[0].planned_amount)) if new_payments else Decimal('0')
                response = (
                    f"‚úÖ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –Ω–∞ {amount:.2f} —Ä—É–±. –∑–∞—á–∏—Å–ª–µ–Ω–æ!\n"
                    f"üí≥ –ö—Ä–µ–¥–∏—Ç #{data['loan_id']}\n"
                    f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {loan.remaining_amount:.2f} —Ä—É–±.\n"
                    f"üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫: {new_term} –º–µ—Å.\n"
                    f"üí∏ –ü–ª–∞—Ç–µ–∂: {new_monthly_payment:.2f} —Ä—É–±."
                )

            for p in new_payments:
                session.add(p)

            next_payment = await session.scalar(
                select(Payment)
                .where(Payment.loan_id == data['loan_id'])
                .where(Payment.payment_date_fact.is_(None))
                .order_by(Payment.payment_date_plan.asc())
            )
            loan.next_payment_date = next_payment.payment_date_plan if next_payment else None

            await session.commit()

        await message.answer(
            response,
            reply_markup=get_admin_nav_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º –ø–æ–≥–∞—à–µ–Ω–∏–∏: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.callback_query(F.data == "admin_reports")
async def reports_menu(callback: types.CallbackQuery):
    """
    –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìú –°–ø—Ä–∞–≤–∫–∞ –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö",
                    callback_data="admin_report_no_obligations"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öñ –ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥",
                    callback_data="admin_report_court_notice"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÖ –ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç",
                    callback_data="admin_report_annual"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(F.data == "admin_report_no_obligations")
async def report_no_obligations(callback: types.CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.
    """
    await callback.message.edit_text(
        "üìú –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤:",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:")
async def process_no_obligations_report(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∫–∏.
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    client_id = int(message.text)
    async with async_session() as session:
        client = await session.get(Client, client_id)
        if not client:
            return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        active_loans = await session.scalar(
            select(func.count(Loan.loan_id))
            .where(
                and_(
                    Loan.client_id == client_id,
                    Loan.status.in_([LoanStatus.ACTIVE, LoanStatus.OVERDUE])
                )
            )
        )
        if active_loans > 0:
            return await message.answer(
                "‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã. –°–ø—Ä–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω–∞."
            )

    report_content = (
        f"–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {client.fullName}\n"
        f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n\n"
        "–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É "
        "—É –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞."
    )

    from io import BytesIO
    report_file = BytesIO(report_content.encode('utf-8'))
    report_file.name = f"no_obligations_{client_id}.txt"

    await message.answer_document(
        types.BufferedInputFile(
            report_file.getvalue(),
            filename=report_file.name
        ),
        caption="üìú –°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
        reply_markup=get_admin_nav_keyboard()
    )

@router.callback_query(F.data == "admin_report_court_notice")
async def report_court_notice(callback: types.CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥.
    """
    await callback.message.edit_text(
        "‚öñ –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥:",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )
    await callback.answer()

@router.message(F.reply_to_message & F.reply_to_message.text == "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:")
async def process_court_notice_report(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏.
    """
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    client_id = int(message.text)
    async with async_session() as session:
        client = await session.get(Client, client_id)
        if not client:
            return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        overdue_payments = await session.scalar(
            select(func.count(Payment.payment_id))
            .where(
                Payment.loan_id.in_(
                    select(Loan.loan_id)
                    .where(Loan.client_id == client_id)
                    .where(Loan.status == LoanStatus.OVERDUE)
                )
            )
            .where(Payment.payment_date_fact.is_(None))
            .where(Payment.payment_date_plan < date.today())
        )
        if overdue_payments < 3:
            return await message.answer(
                "‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3+)"
            )

        total_debt = await session.scalar(
            select(func.sum(Loan.remaining_amount))
            .where(Loan.client_id == client_id)
            .where(Loan.status == LoanStatus.OVERDUE)
        )
        total_debt = total_debt or Decimal('0')

    report_content = (
        f"–ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {client.fullName}\n"
        f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n\n"
        f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {client.fullName},\n"
        "–í —Å–≤—è–∑–∏ —Å –Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º —É—Å–ª–æ–≤–∏–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ "
        f"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {overdue_payments} –ø–ª–∞—Ç–µ–∂–µ–π, –æ–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {total_debt:.2f} —Ä—É–±.), "
        "–≤—ã–∑—ã–≤–∞–µ—Ç–µ—Å—å –≤ —Å—É–¥ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –¥–µ–ª–∞ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏.\n"
        "–î–∞—Ç–∞ –∑–∞—Å–µ–¥–∞–Ω–∏—è: [–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É]\n"
        "–ê–¥—Ä–µ—Å —Å—É–¥–∞: [–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å]"
    )

    from io import BytesIO
    report_file = BytesIO(report_content.encode('utf-8'))
    report_file.name = f"court_notice_{client_id}.txt"

    await message.answer_document(
        types.BufferedInputFile(
            report_file.getvalue(),
            filename=report_file.name
        ),
        caption="‚öñ –ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥",
        reply_markup=get_admin_nav_keyboard()
    )

@router.callback_query(F.data == "admin_report_annual")
async def report_annual(callback: types.CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–¥–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞.
    """
    async with async_session() as session:
        year = datetime.now().year - 1
        total_loans = await session.scalar(
            select(func.count(Loan.loan_id))
            .where(func.extract('year', Loan.issue_date) == year)
        )
        total_amount = await session.scalar(
            select(func.sum(Loan.amount))
            .where(func.extract('year', Loan.issue_date) == year)
        )
        total_payments = await session.scalar(
            select(func.sum(Payment.actual_amount))
            .where(func.extract('year', Payment.payment_date_fact) == year)
        )
        total_penalties = await session.scalar(
            select(func.sum(Payment.penalty_amount))
            .where(func.extract('year', Payment.penalty_date) == year)
        )

        total_amount = total_amount or Decimal('0')
        total_payments = total_payments or Decimal('0')
        total_penalties = total_penalties or Decimal('0')

    report_content = (
        f"–ì–æ–¥–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞ {year} –≥–æ–¥\n\n"
        f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y')}\n\n"
        f"‚Ä¢ –í—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_loans}\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_amount:.2f} —Ä—É–±.\n"
        f"‚Ä¢ –ü–æ–≥–∞—à–µ–Ω–æ: {total_payments:.2f} —Ä—É–±.\n"
        f"‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–æ –ø–µ–Ω–µ–π: {total_penalties:.2f} —Ä—É–±."
    )

    from io import BytesIO
    report_file = BytesIO(report_content.encode('utf-8'))
    report_file.name = f"annual_report_{year}.txt"

    await callback.message.edit_text(
        f"üìÖ –ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç –∑–∞ {year} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω",
        reply_markup=get_admin_nav_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer_document(
        types.BufferedInputFile(
            report_file.getvalue(),
            filename=report_file.name
        ),
        caption=f"üìÖ –ì–æ–¥–æ–≤–æ–π –æ—Ç—á—ë—Ç –∑–∞ {year}"
    )
    await callback.answer()
