from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, update, func
from utils.commands import set_bot_commands
import sqlalchemy
from datetime import date

from utils.database import async_session
from models.user import Client
from config import Config
from utils.generate_reports import generate_no_obligations_doc, generate_court_notice, generate_annual_financial_report

router = Router(name="admin_handlers")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
async def is_admin(user_id: int) -> bool:
    '''
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
    '''
    return user_id in Config.ADMINS

# ---- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ----

@router.message(Command("admin"))
async def admin_auth(message: types.Message):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not await is_admin(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await message.answer(
        "üîê <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ReplyKeyboardRemove()
    )

@router.message(F.text == Config.ADMIN_PASSWORD)
async def admin_panel(message: types.Message, bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥"""
    if not await is_admin(message.from_user.id):
        return

    await set_bot_commands(bot, message.from_user.id)

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        types.InlineKeyboardButton(text="üë• –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_find_client"),
        types.InlineKeyboardButton(text="‚öô –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="admin_change_credit"),
        types.InlineKeyboardButton(text="üìú –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö", callback_data="admin_no_obligations"),
        types.InlineKeyboardButton(text="‚öñ –ü–æ–≤–µ—Å—Ç–∫–∞ –≤ —Å—É–¥", callback_data="admin_court_notice"),
        types.InlineKeyboardButton(text="üìÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_financial_report")
    )
    builder.adjust(2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    await message.answer(
        "üõ† <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )

# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ----

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with async_session() as session:
        clients_count = await session.scalar(select(func.count()).select_from(Client))
        avg_score = await session.scalar(select(func.avg(Client.creditScore)))

    await callback.message.edit_text(
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>{clients_count}</b>\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_score:.1f}</b>\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{len(Config.ADMINS)}</b>",
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == "admin_find_client")
async def find_client(callback: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID"""
    await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text == "üîç –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:")
async def process_client_id(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–ª–∏–µ–Ω—Ç–∞"""
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        client = await session.get(Client, int(message.text))

    if not client:
        return await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await message.answer(
        f"üë§ <b>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        f"‚Ä¢ ID: <b>{client.clientID}</b>\n"
        f"‚Ä¢ –§–ò–û: <b>{client.fullName}</b>\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <b>{client.phone_numbers[0] if client.phone_numbers else '–ù–µ—Ç'}</b>\n"
        f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{client.creditScore}</b>",
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == "admin_change_credit")
async def change_credit_start(callback: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    await callback.message.answer(
        "‚úè –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: 42 750</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("‚úè –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞"))
async def process_credit_change(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    try:
        client_id, new_score = message.text.split()
        new_score = int(new_score)

        if not 0 <= new_score <= 1000:
            raise ValueError
    except:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <code>42 750</code>", parse_mode=ParseMode.HTML)

    async with async_session() as session:
        await session.execute(
            update(Client)
            .where(Client.clientID == int(client_id))
            .values(creditScore=new_score)
        )
        await session.commit()

    await message.answer(f"‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_score}")

@router.callback_query(F.data == "admin_no_obligations")
async def no_obligations_start(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    await callback.message.answer(
        "üìú –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤:",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("üìú –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞"))
async def process_no_obligations(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        doc_text = await generate_no_obligations_doc(int(message.text), session)

    if not doc_text:
        return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–≥–∞—à–µ–Ω")

    await message.answer(doc_text, parse_mode=ParseMode.HTML)

@router.callback_query(F.data == "admin_court_notice")
async def court_notice_start(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥"""
    await callback.message.answer(
        "‚öñ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥:",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("‚öñ –í–≤–µ–¥–∏—Ç–µ ID –∫—Ä–µ–¥–∏—Ç–∞"))
async def process_court_notice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥"""
    if not message.text.isdigit():
        return await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with async_session() as session:
        notice_text = await generate_court_notice(int(message.text), session)

    if not notice_text:
        return await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (<3)")

    await message.answer(notice_text, parse_mode=ParseMode.HTML)

@router.callback_query(F.data == "admin_financial_report")
async def financial_report_start(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –≥–æ–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024):",
        reply_markup=types.ForceReply(selective=True)
    )

@router.message(F.reply_to_message & F.reply_to_message.text.startswith("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥"))
async def process_financial_report(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if not message.text.isdigit():
        return await message.answer("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    year = int(message.text)
    if year < 2000 or year > date.today().year:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥")

    async with async_session() as session:
        report_text = await generate_annual_financial_report(year, session)

    await message.answer(report_text, parse_mode=ParseMode.HTML)