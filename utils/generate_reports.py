import logging
from datetime import date, datetime
from decimal import Decimal
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from models.user import Client, Loan, Payment
from models.base import LoanStatus
from typing import Optional

async def generate_no_obligations_doc(loan_id: int, session: AsyncSession) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    try:
        loan = await session.get(Loan, loan_id)
        if not loan:
            return None

        client = await session.get(Client, loan.client_id)
        if not client:
            return None

        if loan.status != LoanStatus.PAID:
            return None

        total_paid = await session.scalar(
            select(func.sum(Payment.actual_amount))
            .where(Payment.loan_id == loan_id)
            .where(Payment.actual_amount.is_not(None))
        )

        return (
            f"<b>–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤</b>\n\n"
            f"–î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client.fullName}\n"
            f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client.clientID}\n"
            f"ID –∫—Ä–µ–¥–∏—Ç–∞: {loan_id}\n"
            f"–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan.amount:.2f} —Ä—É–±.\n"
            f"–û–ø–ª–∞—á–µ–Ω–æ: {total_paid:.2f} —Ä—É–±.\n"
            f"–°—Ç–∞—Ç—É—Å: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω\n\n"
            f"–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {date.today().strftime('%d.%m.%Y')} "
            f"—É –∫–ª–∏–µ–Ω—Ç–∞ {client.fullName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π "
            f"–ø–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É #{loan_id}."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {e}", exc_info=True)
        return None

async def generate_court_notice(loan_id: int, session: AsyncSession) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–≤–µ—Å—Ç–∫—É –≤ —Å—É–¥ –ø—Ä–∏ ‚â•3 –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    try:
        loan = await session.get(Loan, loan_id)
        if not loan:
            return None

        client = await session.get(Client, loan.client_id)
        if not client:
            return None

        payments = await session.scalars(
            select(Payment)
            .where(Payment.loan_id == loan_id)
            .where(Payment.payment_date_fact.is_(None))
            .where(Payment.payment_date_plan < date.today())
        )
        overdue_payments = payments.all()

        if len(overdue_payments) < 3:
            return None

        total_overdue = sum(Decimal(str(p.planned_amount)) for p in overdue_payments)
        overdue_details = "\n".join(
            f"- {p.payment_date_plan.strftime('%d.%m.%Y')}: {Decimal(str(p.planned_amount)):.2f} —Ä—É–±."
            for p in overdue_payments
        )

        return (
            f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—É–¥</b>\n\n"
            f"–î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {client.fullName}\n"
            f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client.clientID}\n"
            f"ID –∫—Ä–µ–¥–∏—Ç–∞: {loan_id}\n"
            f"–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan.amount:.2f} —Ä—É–±.\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {loan.remaining_amount:.2f} —Ä—É–±.\n\n"
            f"<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n{overdue_details}\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {total_overdue:.2f} —Ä—É–±.\n\n"
            f"–£–≤–∞–∂–∞–µ–º—ã–π {client.fullName},\n"
            f"–í —Å–≤—è–∑–∏ —Å –Ω–∞–ª–∏—á–∏–µ–º {len(overdue_payments)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É #{loan_id}, "
            f"–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å—É–¥ –¥–ª—è –≤–∑—ã—Å–∫–∞–Ω–∏—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏. "
            f"–ü—Ä–æ—Å–∏–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –ø–æ–≥–∞—Å–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Å—É–¥–µ–±–Ω–æ–≥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ—Å—Ç–∫–∏ –≤ —Å—É–¥: {e}", exc_info=True)
        return None

async def generate_annual_financial_report(year: int, session: AsyncSession) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–æ–¥"""
    try:
        logging.debug(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {year} –≥–æ–¥")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ –≥–æ–¥
        loans_query = select(Loan).where(func.extract('year', Loan.issue_date) == year)
        loans_result = await session.scalars(loans_query)
        loans = loans_result.all()
        logging.debug(f"–ù–∞–π–¥–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {len(loans)}")

        total_issued = sum(Decimal(str(loan.amount)) for loan in loans if loan.amount is not None)
        total_loans = len(loans)
        paid_loans = len([loan for loan in loans if loan.status == LoanStatus.PAID])
        active_loans = len([loan for loan in loans if loan.status == LoanStatus.ACTIVE])
        logging.debug(f"–ö—Ä–µ–¥–∏—Ç—ã: –í—Å–µ–≥–æ={total_loans}, –ü–æ–≥–∞—à–µ–Ω–Ω—ã–µ={paid_loans}, –ê–∫—Ç–∏–≤–Ω—ã–µ={active_loans}, –°—É–º–º–∞={total_issued}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –≥–æ–¥
        payments_query = select(Payment).where(
            func.extract('year', Payment.payment_date_fact) == year
        ).where(Payment.actual_amount.is_not(None))
        payments_result = await session.scalars(payments_query)
        payments = payments_result.all()
        logging.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}")

        total_paid = sum(Decimal(str(p.actual_amount)) for p in payments if p.actual_amount is not None)
        total_payments = len(payments)
        logging.debug(f"–ü–ª–∞—Ç–µ–∂–∏: –í—Å–µ–≥–æ={total_payments}, –°—É–º–º–∞={total_paid}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        overdue_payments_query = select(Payment).where(
            Payment.payment_date_fact.is_(None)
        ).where(Payment.payment_date_plan < date.today()).where(
            func.extract('year', Payment.payment_date_plan) == year
        )
        overdue_payments_result = await session.scalars(overdue_payments_query)
        overdue_payments = overdue_payments_result.all()
        logging.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {len(overdue_payments)}")

        total_overdue_amount = sum(Decimal(str(p.planned_amount)) for p in overdue_payments if p.planned_amount is not None)
        logging.debug(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: –°—É–º–º–∞={total_overdue_amount}")

        return (
            f"<b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ {year} –≥–æ–¥</b>\n\n"
            f"üìä <b>–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
            f"- –í—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_loans}\n"
            f"- –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_issued:.2f} —Ä—É–±.\n"
            f"- –ü–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {paid_loans}\n"
            f"- –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {active_loans}\n\n"
            f"üí∏ <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
            f"- –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            f"- –û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {total_paid:.2f} —Ä—É–±.\n"
            f"- –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {len(overdue_payments)}\n"
            f"- –°—É–º–º–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {total_overdue_amount:.2f} —Ä—É–±.\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {date.today().strftime('%d.%m.%Y')}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        return "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"