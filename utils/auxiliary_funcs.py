from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import date
from decimal import Decimal
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from models.user import Loan, Payment
from models.base import LoanStatus


def get_max_credit_amount(score: int) -> Decimal:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞"""
    if score >= 800:
        return Decimal(1000000)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ç–ª–∏—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    elif score >= 600:
        return Decimal(500000)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    elif score >= 400:
        return Decimal(50000)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    else:
        return Decimal(0)  # –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥, –∫—Ä–µ–¥–∏—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω


def get_credit_status(score: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if score >= 800:
        return "–û—Ç–ª–∏—á–Ω—ã–π - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è"
    elif score >= 600:
        return "–•–æ—Ä–æ—à–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
    elif score >= 400:
        return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏"
    else:
        return "–ù–∏–∑–∫–∏–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"

def get_credit_advice(score: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    advice = []
    if score < 700:
        advice.append("- –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–≥–∞—à–∞–π—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã")
    if score < 500:
        advice.append("- –£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
    if score < 300:
        advice.append("- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")

    return "\n".join(advice) if advice else "–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π!"

async def show_payment_schedule(message: Message, loan_id: int, session: AsyncSession):
    """–í—ã–≤–æ–¥–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
        loan = await session.get(Loan, loan_id)
        if not loan:
            await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
        payments = await session.scalars(
            select(Payment)
            .where(Payment.loan_id == loan_id)
            .order_by(Payment.payment_date_plan.asc())
        )
        payments = payments.all()

        if not payments:
            await message.answer("‚Ñπ –ü–æ —ç—Ç–æ–º—É –∫—Ä–µ–¥–∏—Ç—É –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        status = "‚úÖ –ó–∞–∫—Ä—ã—Ç" if loan.status == LoanStatus.CLOSED else "üü° –ê–∫—Ç–∏–≤–µ–Ω"
        msg = [
            f"<b>–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç—É #{loan_id}</b>",
            f"üîπ –°—Ç–∞—Ç—É—Å: {status}",
            f"üîπ –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan.amount:.2f} —Ä—É–±.",
            f"üîπ –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {loan.remaining_amount:.2f} —Ä—É–±.",
            f"üîπ –°—Ä–æ–∫: {loan.term} –º–µ—Å.",
            "\n<b>–î–∞—Ç–∞\t\t–°—É–º–º–∞\t\t–°—Ç–∞—Ç—É—Å</b>"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–ª–∞—Ç–µ–∂–µ
        for payment in payments:
            payment_date = payment.payment_date_plan.strftime('%d.%m.%Y')
            amount = f"{Decimal(str(payment.planned_amount)):.2f} —Ä—É–±."
            
            if payment.payment_date_fact:
                status = "‚úÖ –û–ø–ª–∞—á–µ–Ω"
                if payment.payment_date_fact > payment.payment_date_plan:
                    days_late = (payment.payment_date_fact - payment.payment_date_plan).days
                    status = f"‚ö† –û–ø–ª–∞—á–µ–Ω —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º ({days_late} –¥–Ω.)"
            else:
                if payment.payment_date_plan < date.today():
                    days_late = (date.today() - payment.payment_date_plan).days
                    status = f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω ({days_late} –¥–Ω.)"
                else:
                    status = "üü° –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"

            msg.append(f"{payment_date}\t{amount}\t{status}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        total_paid = sum(
            Decimal(str(p.actual_amount)) 
            for p in payments 
            if p.actual_amount is not None
        )
        total_planned = sum(Decimal(str(p.planned_amount)) for p in payments)
        
        msg.extend([
            "\n<b>–ò—Ç–æ–≥–æ:</b>",
            f"üîπ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {total_planned:.2f} —Ä—É–±.",
            f"üîπ –û–ø–ª–∞—á–µ–Ω–æ: {total_paid:.2f} —Ä—É–±.",
            f"üîπ –û—Å—Ç–∞–ª–æ—Å—å: {total_planned - total_paid:.2f} —Ä—É–±."
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "\n".join(msg),
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}", exc_info=True)
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π",
            reply_markup=ReplyKeyboardRemove()
        )
        return False